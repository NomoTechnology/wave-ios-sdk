// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SharedModels
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import Apollo
@_exported import ApolloAPI
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Account : Swift.Codable {
  public let token: Swift.String
  public let userId: Swift.String
  public let email: Swift.String
  public let name: Swift.String
  public let emailVerified: Swift.Bool
  public let lineIds: [Swift.String]
  public var firstName: Swift.String {
    get
  }
  public static let none: SharedModels.Account
  public init(token: Swift.String, userId: Swift.String, email: Swift.String, name: Swift.String, emailVerified: Swift.Bool, lineIds: [Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ActivateLine : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String
  public let line: SharedModels.Line?
  public init(success: Swift.Bool, message: Swift.String, line: SharedModels.Line?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.ActivateLine {
  public init(response: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine)
}
extension SharedModels.NomoAPI {
  public struct ActivateLineInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, iccId: Swift.String)
    public var lineId: Swift.String {
      get
      set
    }
    public var iccId: Swift.String {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class ActivateLineMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var activateLineInput: SharedModels.NomoAPI.ActivateLineInput
    public init(activateLineInput: SharedModels.NomoAPI.ActivateLineInput)
    public var __variables: SharedModels.NomoAPI.ActivateLineMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var activateLine: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine? {
        get
      }
      public struct ActivateLine : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public var line: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine.Line? {
          get
        }
        public struct Line : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var status: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.LineStatus> {
            get
          }
          public var product: Swift.String? {
            get
          }
          public var legalPerson: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine.Line.LegalPerson {
            get
          }
          public var currentSimCard: SharedModels.NomoAPI.LineFragment.CurrentSimCard? {
            get
          }
          public var phone: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine.Line.Phone {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var lineFragment: SharedModels.NomoAPI.LineFragment {
              get
            }
          }
          public struct LegalPerson : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var id: Swift.String? {
              get
            }
            public var taxId: Swift.String {
              get
            }
            public var name: Swift.String? {
              get
            }
            public var birthdate: Swift.String? {
              get
            }
            public var motherName: Swift.String? {
              get
            }
            public var contactPhones: [SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine.Line.LegalPerson.ContactPhone?]? {
              get
            }
            public var contactEmails: [Swift.String?]? {
              get
            }
            public var address: [SharedModels.NomoAPI.LegalPersonFragment.Address?]? {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var legalPersonFragment: SharedModels.NomoAPI.LegalPersonFragment {
                get
              }
            }
            public struct ContactPhone : SharedModels.NomoAPI.SelectionSet {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public static var __parentType: any ApolloAPI.ParentType {
                get
              }
              public var countryCode: Swift.String {
                get
              }
              public var areaCode: Swift.String {
                get
              }
              public var phoneNumber: Swift.String {
                get
              }
              public struct Fragments : ApolloAPI.FragmentContainer {
                public let __data: ApolloAPI.DataDict
                public init(_dataDict: ApolloAPI.DataDict)
                public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
                  get
                }
              }
              public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
              public var hashValue: Swift.Int {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct Phone : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var countryCode: Swift.String {
              get
            }
            public var areaCode: Swift.String {
              get
            }
            public var phoneNumber: Swift.String {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let ActivateLinePayload: ApolloAPI.Object
}
extension SharedModels.NomoAPI.Objects {
  public static let ActivateSubscriptionConfigPayload: ApolloAPI.Object
}
public struct ActivateSubscriptionConfigRequest : Swift.Codable {
  public var lineId: Swift.String
  public var subscriptionConfigId: Swift.String
  public init(lineId: Swift.String, subscriptionConfigId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI {
  public struct ActivateSubscriptionConfigV2Input : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, subscriptionConfigId: Swift.String)
    public var lineId: Swift.String {
      get
      set
    }
    public var subscriptionConfigId: Swift.String {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let ActivateSubscriptionConfigV2Payload: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public class ActivateSubscriptionConfigV2PayloadMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.ActivateSubscriptionConfigV2Input
    public init(input: SharedModels.NomoAPI.ActivateSubscriptionConfigV2Input)
    public var __variables: SharedModels.NomoAPI.ActivateSubscriptionConfigV2PayloadMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var activateSubscriptionConfigV2: SharedModels.NomoAPI.ActivateSubscriptionConfigV2PayloadMutation.Data.ActivateSubscriptionConfigV2 {
        get
      }
      public struct ActivateSubscriptionConfigV2 : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public var newCycleOperationalDate: Swift.String {
          get
        }
        public var newProduct: SharedModels.NomoAPI.ActivateSubscriptionConfigV2PayloadMutation.Data.ActivateSubscriptionConfigV2.NewProduct {
          get
        }
        public var newAddons: [SharedModels.NomoAPI.ActivateSubscriptionConfigV2PayloadMutation.Data.ActivateSubscriptionConfigV2.NewAddon] {
          get
        }
        public var newRenewalDayOfMonth: Swift.String {
          get
        }
        public var oldCycleEndDate: Swift.String {
          get
        }
        public var oldRenewalDayOfMonth: Swift.String {
          get
        }
        public var subscriptionConfigId: Swift.String {
          get
        }
        public struct NewProduct : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var name: Swift.String {
            get
          }
          public var description: Swift.String {
            get
          }
          public var priceInCents: Swift.Int {
            get
          }
          public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
            get
          }
          public var unitAmount: Swift.Int {
            get
          }
          public var isCurrentSubscriptionProduct: Swift.Bool {
            get
          }
          public var isCustomProduct: Swift.Bool {
            get
          }
          public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
            get
          }
          public var availableToCustomer: Swift.Bool {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var catalogProductFragment: SharedModels.NomoAPI.CatalogProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct NewAddon : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var name: Swift.String {
            get
          }
          public var description: Swift.String {
            get
          }
          public var priceInCents: Swift.Int {
            get
          }
          public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
            get
          }
          public var unitAmount: Swift.Int {
            get
          }
          public var isCurrentSubscriptionProduct: Swift.Bool {
            get
          }
          public var isCustomProduct: Swift.Bool {
            get
          }
          public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
            get
          }
          public var availableToCustomer: Swift.Bool {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var catalogProductFragment: SharedModels.NomoAPI.CatalogProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public struct AddCreditCardInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, token: Swift.String, newPaymentProcessorToken: ApolloAPI.GraphQLNullable<Swift.String> = nil, expirationDate: Swift.String, maskedNumber: Swift.String, paymentProcessor: Swift.String, cardHolderName: Swift.String, cardHolderTaxId: Swift.String)
    public var lineId: Swift.String {
      get
      set
    }
    public var token: Swift.String {
      get
      set
    }
    public var newPaymentProcessorToken: ApolloAPI.GraphQLNullable<Swift.String> {
      get
      set
    }
    public var expirationDate: Swift.String {
      get
      set
    }
    public var maskedNumber: Swift.String {
      get
      set
    }
    public var paymentProcessor: Swift.String {
      get
      set
    }
    public var cardHolderName: Swift.String {
      get
      set
    }
    public var cardHolderTaxId: Swift.String {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let AddCreditCardPayload: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public struct AddonInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(productId: Swift.String, quantity: Swift.Int)
    public var productId: Swift.String {
      get
      set
    }
    public var quantity: Swift.Int {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let Address: ApolloAPI.Object
}
public struct Address : Swift.Codable {
  public var street: Swift.String
  public var streetNumber: Swift.String
  public var city: Swift.String
  public var complement: Swift.String
  public var zipCode: Swift.String
  public static let none: SharedModels.Address
  public init(street: Swift.String, streetNumber: Swift.String, city: Swift.String, complement: Swift.String, zipCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.Address {
  public init(response: SharedModels.NomoAPI.LegalPersonFragment.Address)
}
extension SharedModels.NomoAPI.Objects {
  public static let AppState: ApolloAPI.Object
}
public struct AppState : Swift.Codable {
  public let home: SharedModels.AppState.Home
  public let profile: SharedModels.AppState.Profile
  public static var none: SharedModels.AppState
  public init(home: SharedModels.AppState.Home, profile: SharedModels.AppState.Profile)
  public struct Home : Swift.Codable {
    public let numberPortabilityCard: SharedModels.PortabilityCardState?
    public let simDeliveryCardState: SharedModels.ActivateSimDeliveryCardState?
    public let contentState: SharedModels.ContentState?
    public let profileState: [SharedModels.ProfileState]
    public let cancellationCard: SharedModels.CancellationCard?
    public let referralCard: SharedModels.ReferralRedeemCard?
    public init(numberPortabilityCard: SharedModels.PortabilityCardState?, simDeliveryCardState: SharedModels.ActivateSimDeliveryCardState?, contentState: SharedModels.ContentState?, profileState: [SharedModels.ProfileState], cancellationCard: SharedModels.CancellationCard?, referralCard: SharedModels.ReferralRedeemCard?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Profile : Swift.Codable {
    public let paymentMethodFormV2: SharedModels.PaymentMethodFormV2State?
    public init(paymentMethodFormV2: SharedModels.PaymentMethodFormV2State?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.AppState {
  public init(response: SharedModels.NomoAPI.AppStateQuery.Data.AppState)
}
extension SharedModels.NomoAPI.Objects {
  public static let AppStatePaymentMethodFormV2: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public enum AppStatePaymentMethodFormV2State : Swift.String, ApolloAPI.EnumType {
    case hide
    case show
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.AppStatePaymentMethodFormV2State]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.AppStatePaymentMethodFormV2State] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class AppStateQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.AppStateQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var appState: SharedModels.NomoAPI.AppStateQuery.Data.AppState? {
        get
      }
      public struct AppState : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var home: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home? {
          get
        }
        public var profile: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Profile? {
          get
        }
        public struct Home : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var numberPortabilityCard: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.NumberPortabilityCard? {
            get
          }
          public var simDeliveryCard: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.SimDeliveryCard? {
            get
          }
          public var contentSection: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.ContentSection? {
            get
          }
          public var profileBottomSheet: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.ProfileBottomSheet? {
            get
          }
          public var cancellationCard: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.CancellationCard? {
            get
          }
          public var referralCard: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.ReferralCard? {
            get
          }
          public struct NumberPortabilityCard : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public static var __selections: [ApolloAPI.Selection] {
              get
            }
            public var state: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.NumberPortabilityCardState> {
              get
            }
            public typealias Fragments = ApolloAPI.NoFragments
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct SimDeliveryCard : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public static var __selections: [ApolloAPI.Selection] {
              get
            }
            public var state: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.SimDeliveryCardState> {
              get
            }
            public typealias Fragments = ApolloAPI.NoFragments
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct ContentSection : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public static var __selections: [ApolloAPI.Selection] {
              get
            }
            public var state: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ContentSectionState>? {
              get
            }
            public typealias Fragments = ApolloAPI.NoFragments
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct ProfileBottomSheet : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public static var __selections: [ApolloAPI.Selection] {
              get
            }
            public var items: [ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProfileBottomSheetItems>?] {
              get
            }
            public typealias Fragments = ApolloAPI.NoFragments
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct CancellationCard : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public static var __selections: [ApolloAPI.Selection] {
              get
            }
            public var state: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.CancellationState> {
              get
            }
            public var userEmail: Swift.String? {
              get
            }
            public var userName: Swift.String? {
              get
            }
            public var currentCycleEndDate: Swift.String? {
              get
            }
            public var reactivationDeadlineDate: Swift.String? {
              get
            }
            public typealias Fragments = ApolloAPI.NoFragments
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct ReferralCard : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public static var __selections: [ApolloAPI.Selection] {
              get
            }
            public var referralState: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ReferralState> {
              get
            }
            public var referralLink: Swift.String {
              get
            }
            public typealias Fragments = ApolloAPI.NoFragments
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Fragments = ApolloAPI.NoFragments
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct Profile : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var paymentMethodFormV2: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Profile.PaymentMethodFormV2? {
            get
          }
          public struct PaymentMethodFormV2 : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public static var __selections: [ApolloAPI.Selection] {
              get
            }
            public var state: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.AppStatePaymentMethodFormV2State> {
              get
            }
            public typealias Fragments = ApolloAPI.NoFragments
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Fragments = ApolloAPI.NoFragments
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.Account : Swift.Equatable {
}
public func == (lhs: SharedModels.Account, rhs: SharedModels.Account) -> Swift.Bool
extension SharedModels.Address : Swift.Equatable {
}
public func == (lhs: SharedModels.Address, rhs: SharedModels.Address) -> Swift.Bool
extension SharedModels.AppState : Swift.Equatable {
}
public func == (lhs: SharedModels.AppState, rhs: SharedModels.AppState) -> Swift.Bool
extension SharedModels.AppState.Home : Swift.Equatable {
}
public func == (lhs: SharedModels.AppState.Home, rhs: SharedModels.AppState.Home) -> Swift.Bool
extension SharedModels.AppState.Profile : Swift.Equatable {
}
public func == (lhs: SharedModels.AppState.Profile, rhs: SharedModels.AppState.Profile) -> Swift.Bool
extension SharedModels.CancellationCard : Swift.Equatable {
}
public func == (lhs: SharedModels.CancellationCard, rhs: SharedModels.CancellationCard) -> Swift.Bool
extension SharedModels.Card : Swift.Equatable {
}
public func == (lhs: SharedModels.Card, rhs: SharedModels.Card) -> Swift.Bool
extension SharedModels.CatalogCharacteristic : Swift.Equatable {
}
public func == (lhs: SharedModels.CatalogCharacteristic, rhs: SharedModels.CatalogCharacteristic) -> Swift.Bool
extension SharedModels.CatalogDescription : Swift.Equatable {
}
public func == (lhs: SharedModels.CatalogDescription, rhs: SharedModels.CatalogDescription) -> Swift.Bool
extension SharedModels.CatalogProduct : Swift.Equatable {
}
public func == (lhs: SharedModels.CatalogProduct, rhs: SharedModels.CatalogProduct) -> Swift.Bool
extension SharedModels.CatalogUnlimitedApps : Swift.Equatable {
}
public func == (lhs: SharedModels.CatalogUnlimitedApps, rhs: SharedModels.CatalogUnlimitedApps) -> Swift.Bool
extension SharedModels.Detail : Swift.Equatable {
}
public func == (lhs: SharedModels.Detail, rhs: SharedModels.Detail) -> Swift.Bool
extension SharedModels.ImageResponse : Swift.Equatable {
}
public func == (lhs: SharedModels.ImageResponse, rhs: SharedModels.ImageResponse) -> Swift.Bool
extension SharedModels.LegalPerson : Swift.Equatable {
}
public func == (lhs: SharedModels.LegalPerson, rhs: SharedModels.LegalPerson) -> Swift.Bool
extension SharedModels.Line : Swift.Equatable {
}
public func == (lhs: SharedModels.Line, rhs: SharedModels.Line) -> Swift.Bool
extension SharedModels.Payment : Swift.Equatable {
}
public func == (lhs: SharedModels.Payment, rhs: SharedModels.Payment) -> Swift.Bool
extension SharedModels.PaymentDetail : Swift.Equatable {
}
public func == (lhs: SharedModels.PaymentDetail, rhs: SharedModels.PaymentDetail) -> Swift.Bool
extension SharedModels.PaymentGroup : Swift.Equatable {
}
public func == (lhs: SharedModels.PaymentGroup, rhs: SharedModels.PaymentGroup) -> Swift.Bool
extension SharedModels.PaymentMethod : Swift.Equatable {
}
public func == (lhs: SharedModels.PaymentMethod, rhs: SharedModels.PaymentMethod) -> Swift.Bool
extension SharedModels.Phone : Swift.Equatable {
}
public func == (lhs: SharedModels.Phone, rhs: SharedModels.Phone) -> Swift.Bool
extension SharedModels.Portability : Swift.Equatable {
}
public func == (lhs: SharedModels.Portability, rhs: SharedModels.Portability) -> Swift.Bool
extension SharedModels.PortabilityRequestError : Swift.Equatable {
}
public func == (lhs: SharedModels.PortabilityRequestError, rhs: SharedModels.PortabilityRequestError) -> Swift.Bool
extension SharedModels.Product : Swift.Equatable {
}
public func == (lhs: SharedModels.Product, rhs: SharedModels.Product) -> Swift.Bool
extension SharedModels.ReferralBonus : Swift.Equatable {
}
public func == (lhs: SharedModels.ReferralBonus, rhs: SharedModels.ReferralBonus) -> Swift.Bool
extension SharedModels.ReferralProduct : Swift.Equatable {
}
public func == (lhs: SharedModels.ReferralProduct, rhs: SharedModels.ReferralProduct) -> Swift.Bool
extension SharedModels.ReferralRedeemCard : Swift.Equatable {
}
public func == (lhs: SharedModels.ReferralRedeemCard, rhs: SharedModels.ReferralRedeemCard) -> Swift.Bool
extension SharedModels.SimCard : Swift.Equatable {
}
public func == (lhs: SharedModels.SimCard, rhs: SharedModels.SimCard) -> Swift.Bool
extension SharedModels.Subscription : Swift.Equatable {
}
public func == (lhs: SharedModels.Subscription, rhs: SharedModels.Subscription) -> Swift.Bool
extension SharedModels.SubscriptionConfig : Swift.Equatable {
}
public func == (lhs: SharedModels.SubscriptionConfig, rhs: SharedModels.SubscriptionConfig) -> Swift.Bool
extension SharedModels.SubscriptionProduct : Swift.Equatable {
}
public func == (lhs: SharedModels.SubscriptionProduct, rhs: SharedModels.SubscriptionProduct) -> Swift.Bool
extension SharedModels.SubscriptionProductGroup : Swift.Equatable {
}
public func == (lhs: SharedModels.SubscriptionProductGroup, rhs: SharedModels.SubscriptionProductGroup) -> Swift.Bool
extension SharedModels.SubscriptionProductUsage : Swift.Equatable {
}
public func == (lhs: SharedModels.SubscriptionProductUsage, rhs: SharedModels.SubscriptionProductUsage) -> Swift.Bool
extension SharedModels.SubscriptionUsageReport : Swift.Equatable {
}
public func == (lhs: SharedModels.SubscriptionUsageReport, rhs: SharedModels.SubscriptionUsageReport) -> Swift.Bool
extension SharedModels.Unit : Swift.Equatable {
}
public func == (lhs: SharedModels.Unit, rhs: SharedModels.Unit) -> Swift.Bool
extension SharedModels.UsageByTopupUnitType : Swift.Equatable {
}
public func == (lhs: SharedModels.UsageByTopupUnitType, rhs: SharedModels.UsageByTopupUnitType) -> Swift.Bool
extension SharedModels.ActivateSimDeliveryCardState : Swift.Equatable {
}
public func == (lhs: SharedModels.ActivateSimDeliveryCardState, rhs: SharedModels.ActivateSimDeliveryCardState) -> Swift.Bool
extension SharedModels.ContentState : Swift.Equatable {
}
public func == (lhs: SharedModels.ContentState, rhs: SharedModels.ContentState) -> Swift.Bool
extension SharedModels.DataLineStatus : Swift.Equatable {
}
public func == (lhs: SharedModels.DataLineStatus, rhs: SharedModels.DataLineStatus) -> Swift.Bool
extension SharedModels.NomoAPI.CancellationState : Swift.Equatable {
}
public func == (lhs: SharedModels.NomoAPI.CancellationState, rhs: SharedModels.NomoAPI.CancellationState) -> Swift.Bool
extension SharedModels.PaymentMethodFormV2State : Swift.Equatable {
}
public func == (lhs: SharedModels.PaymentMethodFormV2State, rhs: SharedModels.PaymentMethodFormV2State) -> Swift.Bool
extension SharedModels.PortabilityCardState : Swift.Equatable {
}
public func == (lhs: SharedModels.PortabilityCardState, rhs: SharedModels.PortabilityCardState) -> Swift.Bool
extension SharedModels.PortabilityRequestStatus : Swift.Equatable {
}
public func == (lhs: SharedModels.PortabilityRequestStatus, rhs: SharedModels.PortabilityRequestStatus) -> Swift.Bool
extension SharedModels.PortabilityStatus : Swift.Equatable {
}
public func == (lhs: SharedModels.PortabilityStatus, rhs: SharedModels.PortabilityStatus) -> Swift.Bool
extension SharedModels.ProfileState : Swift.Equatable {
}
public func == (lhs: SharedModels.ProfileState, rhs: SharedModels.ProfileState) -> Swift.Bool
extension SharedModels.StatusPayment : Swift.Equatable {
}
public func == (lhs: SharedModels.StatusPayment, rhs: SharedModels.StatusPayment) -> Swift.Bool
extension SharedModels.SubscriptionProductType : Swift.Equatable {
}
public func == (lhs: SharedModels.SubscriptionProductType, rhs: SharedModels.SubscriptionProductType) -> Swift.Bool
extension SharedModels.SubscriptionProductUnitType : Swift.Equatable {
}
public func == (lhs: SharedModels.SubscriptionProductUnitType, rhs: SharedModels.SubscriptionProductUnitType) -> Swift.Bool
extension SharedModels.UsagePaymentMethodType : Swift.Equatable {
}
public func == (lhs: SharedModels.UsagePaymentMethodType, rhs: SharedModels.UsagePaymentMethodType) -> Swift.Bool
extension SharedModels.UsageProductType : Swift.Equatable {
}
public func == (lhs: SharedModels.UsageProductType, rhs: SharedModels.UsageProductType) -> Swift.Bool
extension SharedModels.UsageReportCardState : Swift.Equatable {
}
public func == (lhs: SharedModels.UsageReportCardState, rhs: SharedModels.UsageReportCardState) -> Swift.Bool
extension SharedModels.Card : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.CatalogCharacteristic : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.CatalogDescription : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.CatalogUnlimitedApps : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.ImageResponse : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.Payment : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.PaymentDetail : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.PaymentGroup : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.PaymentMethod : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.SubscriptionProduct : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.SubscriptionProductUsage : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.UsageByTopupUnitType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.NomoAPI.Interfaces {
  public static let BaseMutationPayload: ApolloAPI.Interface
}
extension SharedModels.NomoAPI {
  public struct CancelSubscriptionConfigInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, subscriptionConfigId: Swift.String)
    public var lineId: Swift.String {
      get
      set
    }
    public var subscriptionConfigId: Swift.String {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class CancelSubscriptionConfigMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.CancelSubscriptionConfigInput
    public init(input: SharedModels.NomoAPI.CancelSubscriptionConfigInput)
    public var __variables: SharedModels.NomoAPI.CancelSubscriptionConfigMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var cancelSubscriptionConfig: SharedModels.NomoAPI.CancelSubscriptionConfigMutation.Data.CancelSubscriptionConfig {
        get
      }
      public struct CancelSubscriptionConfig : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let CancelSubscriptionConfigPayload: ApolloAPI.Object
}
public struct CancellationCard : Swift.Codable {
  public let state: SharedModels.StateCancellation
  public let userEmail: Swift.String?
  public let userName: Swift.String?
  public let currentCycleEndDate: Foundation.Date?
  public let reactivationDeadlineDate: Foundation.Date?
  public init(state: SharedModels.StateCancellation, userEmail: Swift.String?, userName: Swift.String?, currentCycleEndDate: Foundation.Date?, reactivationDeadlineDate: Foundation.Date?)
  public static let none: SharedModels.CancellationCard
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum StateCancellation : Swift.String, Swift.Codable {
  case HIDE
  case REQUESTED
  case EXECUTED_WITHIN_REACTIVATION_PERIOD
  case EXECUTED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.CancellationCard {
  public init?(response: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.CancellationCard?)
}
extension SharedModels.StateCancellation {
  public init(response: SharedModels.NomoAPI.CancellationState?)
}
extension SharedModels.NomoAPI.Objects {
  public static let CancellationCard: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public struct CancellationRequestInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, reason: ApolloAPI.GraphQLNullable<Swift.String> = nil)
    public var lineId: Swift.String {
      get
      set
    }
    public var reason: ApolloAPI.GraphQLNullable<Swift.String> {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class CancellationRequestMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.CancellationRequestInput
    public init(input: SharedModels.NomoAPI.CancellationRequestInput)
    public var __variables: SharedModels.NomoAPI.CancellationRequestMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var cancellationRequest: SharedModels.NomoAPI.CancellationRequestMutation.Data.CancellationRequest {
        get
      }
      public struct CancellationRequest : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public var userEmail: Swift.String {
          get
        }
        public var userName: Swift.String {
          get
        }
        public var currentCycleEndDate: Swift.String? {
          get
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let CancellationRequestPayload: ApolloAPI.Object
}
public struct CancellationRequestPayload : Swift.Codable {
  public var userEmail: Swift.String
  public var userName: Swift.String
  public var currentCycleEndDate: Foundation.Date?
  public var currentCycleEndDateFormatted: Swift.String? {
    get
  }
  public init(userEmail: Swift.String, userName: Swift.String, currentCycleEndDate: Foundation.Date?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.CancellationRequestPayload {
  public init(response: SharedModels.NomoAPI.CancellationRequestMutation.Data.CancellationRequest)
}
extension SharedModels.NomoAPI {
  public enum CancellationState : Swift.String, ApolloAPI.EnumType {
    case hide
    case requested
    case executedWithinReactivationPeriod
    case executed
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.CancellationState]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.CancellationState] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let CancellationSummary: ApolloAPI.Object
}
public struct CancellationSummary : Swift.Codable {
  public var isWithinWithdrawalPeriod: Swift.Bool
  public var withdrawalPeriodEndDate: Foundation.Date?
  public var withdrawalRefund: Swift.String?
  public var currentCycleEndDate: Foundation.Date?
  public var status: SharedModels.CancellationSummary.Status {
    get
  }
  public enum Status : Swift.Codable {
    case DEFAULT
    case INACTIVE
    case EXECUTED_WITHIN_REACTIVATION_PERIOD
    public static func == (a: SharedModels.CancellationSummary.Status, b: SharedModels.CancellationSummary.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public var currentCycleEndDateFormatted: Swift.String {
    get
  }
  public var withdrawalPeriodEndDateFormatted: Swift.String {
    get
  }
  public var withdrawalRefundFormatted: Swift.String {
    get
  }
  public init(isWithinWithdrawalPeriod: Swift.Bool, withdrawalPeriodEndDate: Foundation.Date?, withdrawalRefund: Swift.String?, currentCycleEndDate: Foundation.Date?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.CancellationSummary {
  public init(response: SharedModels.NomoAPI.CancellationSummaryQuery.Data.CancellationSummary)
}
extension SharedModels.NomoAPI {
  public class CancellationSummaryQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.CancellationSummaryQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var cancellationSummary: SharedModels.NomoAPI.CancellationSummaryQuery.Data.CancellationSummary {
        get
      }
      public struct CancellationSummary : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var isWithinWithdrawalPeriod: Swift.Bool {
          get
        }
        public var withdrawalPeriodEndDate: Swift.String? {
          get
        }
        public var withdrawalRefund: Swift.String? {
          get
        }
        public var currentCycleEndDate: Swift.String? {
          get
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let Card: ApolloAPI.Object
}
public struct Card : Swift.Codable {
  public let maskedNumber: Swift.String
  public let processor: Swift.String
  public let expirationDate: Swift.String?
  public static let none: SharedModels.Card
  public init(maskedNumber: Swift.String, processor: Swift.String, expirationDate: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.Card {
  public init(response: SharedModels.NomoAPI.PaymentMethodFragment.PaymentMethodData)
  public init?(response: SharedModels.NomoAPI.PaymentMethodFragment.PaymentMethodData?)
}
public struct CatalogCharacteristic : Swift.Codable {
  public let image: Swift.String
  public let text: Swift.String
  public init(image: Swift.String, text: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CatalogDescription : Swift.Codable {
  public let characteristics: [SharedModels.CatalogCharacteristic]
  public let unlimitedApps: SharedModels.CatalogUnlimitedApps?
  public static let none: SharedModels.CatalogDescription
  public init(characteristics: [SharedModels.CatalogCharacteristic], unlimitedApps: SharedModels.CatalogUnlimitedApps?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI.Objects {
  public static let CatalogProduct: ApolloAPI.Object
}
public struct CatalogProduct : Swift.Codable {
  public let id: Swift.String
  public let name: Swift.String
  public let description: SharedModels.CatalogDescription
  public let priceInCents: Swift.Int
  public let unitType: SharedModels.SubscriptionProductUnitType
  public let unitAmount: Swift.Int
  public var isCurrentSubscriptionProduct: Swift.Bool
  public let isCustomProduct: Swift.Bool
  public let type: SharedModels.SubscriptionProductType
  public let availableToCustomer: Swift.Bool
  public var unitAmountFormatted: Swift.String {
    get
  }
  public var priceInCentsFormatted: Swift.String {
    get
  }
  public static let none: SharedModels.CatalogProduct
  public init(id: Swift.String, name: Swift.String, description: SharedModels.CatalogDescription, priceInCents: Swift.Int, unitType: SharedModels.SubscriptionProductUnitType, unitAmount: Swift.Int, isCurrentSubscriptionProduct: Swift.Bool, isCustomProduct: Swift.Bool, type: SharedModels.SubscriptionProductType, availableToCustomer: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.CatalogProduct {
  public init(response: SharedModels.NomoAPI.ActivateSubscriptionConfigV2PayloadMutation.Data.ActivateSubscriptionConfigV2.NewAddon)
  public init(response: SharedModels.NomoAPI.ActivateSubscriptionConfigV2PayloadMutation.Data.ActivateSubscriptionConfigV2.NewProduct)
}
extension SharedModels.CatalogProduct {
  public init(response: SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Mutation.Data.CreateSubscriptionConfigProposalV2.NewAddon)
  public init(response: SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Mutation.Data.CreateSubscriptionConfigProposalV2.NewProduct)
}
extension SharedModels.CatalogProduct {
  public init(response: SharedModels.NomoAPI.CatalogProductFragment)
}
extension SharedModels.CatalogProduct {
  public init(response: SharedModels.NomoAPI.PurchaseTopupScreenQuery.Data.PurchaseTopupScreen.CatalogProduct)
}
extension SharedModels.NomoAPI {
  public struct CatalogProductFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var name: Swift.String {
      get
    }
    public var description: Swift.String {
      get
    }
    public var priceInCents: Swift.Int {
      get
    }
    public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
      get
    }
    public var unitAmount: Swift.Int {
      get
    }
    public var isCurrentSubscriptionProduct: Swift.Bool {
      get
    }
    public var isCustomProduct: Swift.Bool {
      get
    }
    public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
      get
    }
    public var availableToCustomer: Swift.Bool {
      get
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct CatalogUnlimitedApps : Swift.Codable {
  public let image: Swift.String
  public let text: Swift.String
  public init(image: Swift.String, text: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI.Objects {
  public static let ChangeProductScreen: ApolloAPI.Object
}
public struct ChangeProductScreen : Swift.Codable {
  public let nextRenewalDate: Foundation.Date
  public let catalogProducts: [SharedModels.CatalogProduct]
  public init(nextRenewalDate: Foundation.Date, catalogProducts: [SharedModels.CatalogProduct])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.ChangeProductScreen {
  public var standardProductsAvailableToClient: [SharedModels.CatalogProduct] {
    get
  }
  public var mainStandardProduct: SharedModels.CatalogProduct {
    get
  }
  public var isStandardPlanTheCurrentSubscriptionProduct: Swift.Bool {
    get
  }
  public var mainCustomProduct: SharedModels.CatalogProduct {
    get
  }
  public var customAddonProductsAvailableToClient: [SharedModels.CatalogProduct] {
    get
  }
  public var monthlyPriceInCents: Swift.Float {
    get
  }
}
extension SharedModels.ChangeProductScreen {
  public init(response: SharedModels.NomoAPI.ChangeProductScreenQuery.Data.ChangeProductScreen)
}
extension SharedModels.NomoAPI {
  public class ChangeProductScreenQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.ChangeProductScreenQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var changeProductScreen: SharedModels.NomoAPI.ChangeProductScreenQuery.Data.ChangeProductScreen? {
        get
      }
      public struct ChangeProductScreen : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var nextRenewalDate: Swift.String? {
          get
        }
        public var catalogProducts: [SharedModels.NomoAPI.ChangeProductScreenQuery.Data.ChangeProductScreen.CatalogProduct] {
          get
        }
        public struct CatalogProduct : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var name: Swift.String {
            get
          }
          public var description: Swift.String {
            get
          }
          public var priceInCents: Swift.Int {
            get
          }
          public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
            get
          }
          public var unitAmount: Swift.Int {
            get
          }
          public var isCurrentSubscriptionProduct: Swift.Bool {
            get
          }
          public var isCustomProduct: Swift.Bool {
            get
          }
          public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
            get
          }
          public var availableToCustomer: Swift.Bool {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var catalogProductFragment: SharedModels.NomoAPI.CatalogProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let ContentSection: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public enum ContentSectionState : Swift.String, ApolloAPI.EnumType {
    case hide
    case show
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.ContentSectionState]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.ContentSectionState] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum ContentState : Swift.String, Swift.Codable {
  case SHOW
  case HIDE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.ContentState {
  public init(response: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.ContentSection?)
}
extension SharedModels.NomoAPI.Objects {
  public static let CreateSubscriptionConfigPayload: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public struct CreateSubscriptionConfigProposalV2Input : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, productId: ApolloAPI.GraphQLNullable<Swift.String> = nil, operationalDate: ApolloAPI.GraphQLNullable<Swift.String> = nil, addons: ApolloAPI.GraphQLNullable<[SharedModels.NomoAPI.AddonInput]> = nil)
    public var lineId: Swift.String {
      get
      set
    }
    public var productId: ApolloAPI.GraphQLNullable<Swift.String> {
      get
      set
    }
    public var operationalDate: ApolloAPI.GraphQLNullable<Swift.String> {
      get
      set
    }
    public var addons: ApolloAPI.GraphQLNullable<[SharedModels.NomoAPI.AddonInput]> {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class CreateSubscriptionConfigProposalV2Mutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Input
    public init(input: SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Input)
    public var __variables: SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Mutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var createSubscriptionConfigProposalV2: SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Mutation.Data.CreateSubscriptionConfigProposalV2 {
        get
      }
      public struct CreateSubscriptionConfigProposalV2 : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public var newCycleOperationalDate: Swift.String {
          get
        }
        public var newProduct: SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Mutation.Data.CreateSubscriptionConfigProposalV2.NewProduct {
          get
        }
        public var newAddons: [SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Mutation.Data.CreateSubscriptionConfigProposalV2.NewAddon] {
          get
        }
        public var newRenewalDayOfMonth: Swift.String {
          get
        }
        public var oldCycleEndDate: Swift.String {
          get
        }
        public var oldRenewalDayOfMonth: Swift.String {
          get
        }
        public var subscriptionConfigId: Swift.String {
          get
        }
        public struct NewProduct : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var name: Swift.String {
            get
          }
          public var description: Swift.String {
            get
          }
          public var priceInCents: Swift.Int {
            get
          }
          public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
            get
          }
          public var unitAmount: Swift.Int {
            get
          }
          public var isCurrentSubscriptionProduct: Swift.Bool {
            get
          }
          public var isCustomProduct: Swift.Bool {
            get
          }
          public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
            get
          }
          public var availableToCustomer: Swift.Bool {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var catalogProductFragment: SharedModels.NomoAPI.CatalogProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct NewAddon : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var name: Swift.String {
            get
          }
          public var description: Swift.String {
            get
          }
          public var priceInCents: Swift.Int {
            get
          }
          public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
            get
          }
          public var unitAmount: Swift.Int {
            get
          }
          public var isCurrentSubscriptionProduct: Swift.Bool {
            get
          }
          public var isCustomProduct: Swift.Bool {
            get
          }
          public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
            get
          }
          public var availableToCustomer: Swift.Bool {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var catalogProductFragment: SharedModels.NomoAPI.CatalogProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct CreateSubscriptionConfigRequest : Swift.Codable {
  public let lineId: Swift.String
  public let productId: Swift.String?
  public let operationalDate: Swift.String?
  public let addons: [SharedModels.SubscriptionAddonInput]?
  public init(lineId: Swift.String, productId: Swift.String?, operationalDate: Swift.String?, addons: [SharedModels.SubscriptionAddonInput]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI.Objects {
  public static let CreateSubscriptionConfigV2Payload: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public class CreditCardMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.AddCreditCardInput
    public init(input: SharedModels.NomoAPI.AddCreditCardInput)
    public var __variables: SharedModels.NomoAPI.CreditCardMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var addCreditCard: SharedModels.NomoAPI.CreditCardMutation.Data.AddCreditCard? {
        get
      }
      public struct AddCreditCard : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public var paymentMethod: SharedModels.NomoAPI.CreditCardMutation.Data.AddCreditCard.PaymentMethod? {
          get
        }
        public struct PaymentMethod : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.PaymentMethodType> {
            get
          }
          public var name: Swift.String {
            get
          }
          public var pngIconUrl: Swift.String? {
            get
          }
          public var paymentMethodData: SharedModels.NomoAPI.PaymentMethodFragment.PaymentMethodData {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var paymentMethodFragment: SharedModels.NomoAPI.PaymentMethodFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let DailyUsage: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public struct DailyUsageFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var day: Swift.String {
      get
    }
    public var dataUsageInMebibytes: Swift.String {
      get
    }
    public var dataUsageInGibibytes: Swift.String {
      get
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum DataLineStatus : Swift.String, Swift.Codable {
  case STAND_BY
  case ACTIVE
  case CANCELED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.DataLineStatus {
  public init(response: SharedModels.NomoAPI.LineStatus?)
}
public struct Detail {
  public let lineNumber: Swift.String
  public let userName: Swift.String
  public let taxId: Swift.String
  public var date: Foundation.Date?
  public init(lineNumber: Swift.String, userName: Swift.String, taxId: Swift.String, date: Foundation.Date?)
  public static let none: SharedModels.Detail
  public var formatedTaxId: Swift.String {
    get
  }
  public var formatedLineNumber: Swift.String {
    get
  }
}
extension SharedModels.Detail : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let DismissNumberPortabilityCardPayload: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public struct DismissNumberPortabilityCardRequestInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String)
    public var lineId: Swift.String {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct DismissPortability : Swift.Codable {
  public init(success: Swift.Bool, message: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.DismissPortability {
  public init(response: SharedModels.NomoAPI.RequestAppStateMutation.Data.DismissNumberPortabilityCard)
}
extension SharedModels.NomoAPI {
  public class GetPaymentQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.GetPaymentQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var payments: [SharedModels.NomoAPI.GetPaymentQuery.Data.Payment] {
        get
      }
      public struct Payment : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var referenceYear: Swift.Int? {
          get
        }
        public var payments: [SharedModels.NomoAPI.GetPaymentQuery.Data.Payment.Payment] {
          get
        }
        public struct Payment : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var paymentDate: Swift.String? {
            get
          }
          public var description: Swift.String {
            get
          }
          public var status: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.PaymentStatus> {
            get
          }
          public var priceInCents: Swift.Int {
            get
          }
          public var productValidFrom: Swift.String? {
            get
          }
          public var productValidThru: Swift.String {
            get
          }
          public var paymentMethod: SharedModels.NomoAPI.GetPaymentQuery.Data.Payment.Payment.PaymentMethod? {
            get
          }
          public var referenceDate: Swift.String {
            get
          }
          public var paymentDetails: [SharedModels.NomoAPI.PaymentFragment.PaymentDetail] {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var paymentFragment: SharedModels.NomoAPI.PaymentFragment {
              get
            }
          }
          public struct PaymentMethod : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.PaymentMethodType> {
              get
            }
            public var name: Swift.String {
              get
            }
            public var pngIconUrl: Swift.String? {
              get
            }
            public var paymentMethodData: SharedModels.NomoAPI.PaymentMethodFragment.PaymentMethodData {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var paymentMethodFragment: SharedModels.NomoAPI.PaymentMethodFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let HomeScreen: ApolloAPI.Object
}
public struct ImageResponse : Swift.Codable {
  public let image: Foundation.Data
  public init(image: Foundation.Data)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI.Objects {
  public static let LegalPerson: ApolloAPI.Object
}
public struct LegalPerson : Swift.Codable {
  public var id: Swift.String
  public var taxId: Swift.String
  public var name: Swift.String
  public var birthdate: Swift.String
  public var motherName: Swift.String
  public var contactPhones: [SharedModels.Phone]
  public var contactEmails: [Swift.String]
  public var address: [SharedModels.Address]
  public var firstName: Swift.String {
    get
  }
  public static let none: SharedModels.LegalPerson
  public init(id: Swift.String, taxId: Swift.String, name: Swift.String, birthdate: Swift.String, motherName: Swift.String, contactPhones: [SharedModels.Phone], contactEmails: [Swift.String], address: [SharedModels.Address])
  public func getTaxIdOnlyNumbers() -> Swift.String
  public func getTaxIdFormated() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.LegalPerson {
  public init(response: SharedModels.NomoAPI.LineQuery.Data.Line)
}
extension SharedModels.LegalPerson {
  public init?(response: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine.Line?)
}
extension SharedModels.LegalPerson {
  public init(response: SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest)
}
extension SharedModels.NomoAPI {
  public struct LegalPersonFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String? {
      get
    }
    public var taxId: Swift.String {
      get
    }
    public var name: Swift.String? {
      get
    }
    public var birthdate: Swift.String? {
      get
    }
    public var motherName: Swift.String? {
      get
    }
    public var contactPhones: [SharedModels.NomoAPI.LegalPersonFragment.ContactPhone?]? {
      get
    }
    public var contactEmails: [Swift.String?]? {
      get
    }
    public var address: [SharedModels.NomoAPI.LegalPersonFragment.Address?]? {
      get
    }
    public struct ContactPhone : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var countryCode: Swift.String {
        get
      }
      public var areaCode: Swift.String {
        get
      }
      public var phoneNumber: Swift.String {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct Address : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var street: Swift.String {
        get
      }
      public var streetNumber: Swift.String {
        get
      }
      public var city: Swift.String {
        get
      }
      public var complement: Swift.String? {
        get
      }
      public var zipCode: Swift.String {
        get
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let Line: ApolloAPI.Object
}
public struct Line : Swift.Codable {
  public var id: Swift.String
  public var status: SharedModels.DataLineStatus
  public var product: Swift.String?
  public var person: SharedModels.LegalPerson
  public var phone: SharedModels.Phone
  public var currentSimCard: SharedModels.SimCard
  public static let none: SharedModels.Line
  public init(id: Swift.String, status: SharedModels.DataLineStatus, product: Swift.String?, person: SharedModels.LegalPerson, phone: SharedModels.Phone, currentSimCard: SharedModels.SimCard)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.Line {
  public init(response: SharedModels.NomoAPI.LineQuery.Data.Line)
}
extension SharedModels.Line {
  public init?(response: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine.Line?)
}
extension SharedModels.NomoAPI {
  public struct LineFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var status: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.LineStatus> {
      get
    }
    public var product: Swift.String? {
      get
    }
    public var legalPerson: SharedModels.NomoAPI.LineFragment.LegalPerson {
      get
    }
    public var currentSimCard: SharedModels.NomoAPI.LineFragment.CurrentSimCard? {
      get
    }
    public var phone: SharedModels.NomoAPI.LineFragment.Phone {
      get
    }
    public struct LegalPerson : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var id: Swift.String? {
        get
      }
      public var taxId: Swift.String {
        get
      }
      public var name: Swift.String? {
        get
      }
      public var birthdate: Swift.String? {
        get
      }
      public var motherName: Swift.String? {
        get
      }
      public var contactPhones: [SharedModels.NomoAPI.LineFragment.LegalPerson.ContactPhone?]? {
        get
      }
      public var contactEmails: [Swift.String?]? {
        get
      }
      public var address: [SharedModels.NomoAPI.LegalPersonFragment.Address?]? {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var legalPersonFragment: SharedModels.NomoAPI.LegalPersonFragment {
          get
        }
      }
      public struct ContactPhone : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public var countryCode: Swift.String {
          get
        }
        public var areaCode: Swift.String {
          get
        }
        public var phoneNumber: Swift.String {
          get
        }
        public struct Fragments : ApolloAPI.FragmentContainer {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
            get
          }
        }
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct CurrentSimCard : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var iccId: Swift.String {
        get
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct Phone : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var countryCode: Swift.String {
        get
      }
      public var areaCode: Swift.String {
        get
      }
      public var phoneNumber: Swift.String {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class LineQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.LineQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var line: SharedModels.NomoAPI.LineQuery.Data.Line? {
        get
      }
      public struct Line : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var id: Swift.String {
          get
        }
        public var status: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.LineStatus> {
          get
        }
        public var product: Swift.String? {
          get
        }
        public var legalPerson: SharedModels.NomoAPI.LineQuery.Data.Line.LegalPerson {
          get
        }
        public var currentSimCard: SharedModels.NomoAPI.LineFragment.CurrentSimCard? {
          get
        }
        public var phone: SharedModels.NomoAPI.LineQuery.Data.Line.Phone {
          get
        }
        public struct Fragments : ApolloAPI.FragmentContainer {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public var lineFragment: SharedModels.NomoAPI.LineFragment {
            get
          }
        }
        public struct LegalPerson : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public var id: Swift.String? {
            get
          }
          public var taxId: Swift.String {
            get
          }
          public var name: Swift.String? {
            get
          }
          public var birthdate: Swift.String? {
            get
          }
          public var motherName: Swift.String? {
            get
          }
          public var contactPhones: [SharedModels.NomoAPI.LineQuery.Data.Line.LegalPerson.ContactPhone?]? {
            get
          }
          public var contactEmails: [Swift.String?]? {
            get
          }
          public var address: [SharedModels.NomoAPI.LegalPersonFragment.Address?]? {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var legalPersonFragment: SharedModels.NomoAPI.LegalPersonFragment {
              get
            }
          }
          public struct ContactPhone : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var countryCode: Swift.String {
              get
            }
            public var areaCode: Swift.String {
              get
            }
            public var phoneNumber: Swift.String {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct Phone : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public var countryCode: Swift.String {
            get
          }
          public var areaCode: Swift.String {
            get
          }
          public var phoneNumber: Swift.String {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public enum LineStatus : Swift.String, ApolloAPI.EnumType {
    case standBy
    case active
    case canceled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.LineStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.LineStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let Mutation: ApolloAPI.Object
}
public enum NomoAPI {
}
extension SharedModels.NomoAPI.Objects {
  public static let NumberPortabilityCard: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public enum NumberPortabilityCardState : Swift.String, ApolloAPI.EnumType {
    case request
    case followUp
    case requestError
    case requestErrorWithRetry
    case hide
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.NumberPortabilityCardState]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.NumberPortabilityCardState] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let NumberPortabilityRequest: ApolloAPI.Object
}
extension SharedModels.NomoAPI.Objects {
  public static let NumberPortabilityRequestError: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public struct NumberPortabilityRequestInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, portedNumberHolderName: Swift.String, portedNumberHolderTaxId: Swift.String, portedNumber: Swift.String)
    public var lineId: Swift.String {
      get
      set
    }
    public var portedNumberHolderName: Swift.String {
      get
      set
    }
    public var portedNumberHolderTaxId: Swift.String {
      get
      set
    }
    public var portedNumber: Swift.String {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public enum NumberPortabilityRequestStatus : Swift.String, ApolloAPI.EnumType {
    case created
    case requested
    case accepted
    case authorized
    case executed
    case rejected
    case notAuthorized
    case canceled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.NumberPortabilityRequestStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.NumberPortabilityRequestStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let Payment: ApolloAPI.Object
}
public struct Payment : Swift.Codable {
  public let id: Swift.String
  public let paymentDate: Foundation.Date?
  public let description: Swift.String
  public let status: SharedModels.StatusPayment
  public let priceInCents: Swift.Int
  public let productValidFrom: Foundation.Date?
  public let productValidThru: Foundation.Date
  public let paymentMethod: SharedModels.PaymentMethod?
  public let referenceDate: Foundation.Date
  public let paymentDetail: [SharedModels.PaymentDetail]
  public var isPaymentDetailEmpty: Swift.Bool {
    get
  }
  public var totalDetailsPriceInCents: Swift.String {
    get
  }
  public var dayAndMonthFormated: Swift.String? {
    get
  }
  public var priceInCentsFormatted: Swift.String {
    get
  }
  public var paymentDateFormat: Swift.String? {
    get
  }
  public var productValidFromFormat: Swift.String? {
    get
  }
  public var productValidThruFormat: Swift.String {
    get
  }
  public init(id: Swift.String, paymentDate: Foundation.Date?, description: Swift.String, status: SharedModels.StatusPayment, priceInCents: Swift.Int, productValidFrom: Foundation.Date?, productValidThru: Foundation.Date, paymentMethod: SharedModels.PaymentMethod?, referenceDate: Foundation.Date, paymentDetail: [SharedModels.PaymentDetail])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.Payment {
  public init(response: SharedModels.NomoAPI.GetPaymentQuery.Data.Payment.Payment)
}
extension Swift.Array where Element == SharedModels.Payment {
  public init(response: [SharedModels.NomoAPI.GetPaymentQuery.Data.Payment.Payment])
}
extension SharedModels.NomoAPI.Objects {
  public static let PaymentDetail: ApolloAPI.Object
}
public struct PaymentDetail : Swift.Codable {
  public let description: Swift.String
  public let priceInCents: Swift.Int
  public var priceInCentsFormatted: Swift.String {
    get
  }
  public init(description: Swift.String, priceInCents: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.PaymentDetail {
  public init(response: SharedModels.NomoAPI.PaymentFragment.PaymentDetail)
}
extension Swift.Array where Element == SharedModels.PaymentDetail {
  public init(response: [SharedModels.NomoAPI.PaymentFragment.PaymentDetail])
}
extension SharedModels.NomoAPI {
  public struct PaymentFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var paymentDate: Swift.String? {
      get
    }
    public var description: Swift.String {
      get
    }
    public var status: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.PaymentStatus> {
      get
    }
    public var priceInCents: Swift.Int {
      get
    }
    public var productValidFrom: Swift.String? {
      get
    }
    public var productValidThru: Swift.String {
      get
    }
    public var paymentMethod: SharedModels.NomoAPI.PaymentFragment.PaymentMethod? {
      get
    }
    public var referenceDate: Swift.String {
      get
    }
    public var paymentDetails: [SharedModels.NomoAPI.PaymentFragment.PaymentDetail] {
      get
    }
    public struct PaymentMethod : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.PaymentMethodType> {
        get
      }
      public var name: Swift.String {
        get
      }
      public var pngIconUrl: Swift.String? {
        get
      }
      public var paymentMethodData: SharedModels.NomoAPI.PaymentMethodFragment.PaymentMethodData {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var paymentMethodFragment: SharedModels.NomoAPI.PaymentMethodFragment {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct PaymentDetail : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var description: Swift.String {
        get
      }
      public var priceInCents: Swift.Int {
        get
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let PaymentGroup: ApolloAPI.Object
}
public struct PaymentGroup : Swift.Codable, Swift.Identifiable {
  public let id: Foundation.UUID
  public let referenceYear: Swift.Int?
  public let payments: [SharedModels.Payment]
  public init(id: Foundation.UUID, referenceYear: Swift.Int?, payments: [SharedModels.Payment])
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.PaymentGroup {
  public init(response: SharedModels.NomoAPI.GetPaymentQuery.Data.Payment)
}
extension Swift.Array where Element == SharedModels.PaymentGroup {
  public init(response: [SharedModels.NomoAPI.GetPaymentQuery.Data.Payment])
}
extension SharedModels.NomoAPI.Objects {
  public static let PaymentMethod: ApolloAPI.Object
}
public struct PaymentMethod : Swift.Codable {
  public let type: SharedModels.UsagePaymentMethodType
  public let name: Swift.String
  public let pngIconUrl: Swift.String?
  public let paymentMethodData: SharedModels.Card
  public init(type: SharedModels.UsagePaymentMethodType, name: Swift.String, pngIconUrl: Swift.String?, paymentMethodData: SharedModels.Card)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.PaymentMethod {
  public init(response: SharedModels.NomoAPI.PaymentMethodQuery.Data.PaymentMethod)
}
extension SharedModels.PaymentMethod {
  public init(response: SharedModels.NomoAPI.PaymentFragment.PaymentMethod)
}
extension SharedModels.PaymentMethod {
  public init(response: SharedModels.NomoAPI.CreditCardMutation.Data.AddCreditCard.PaymentMethod?)
}
public enum PaymentMethodFormV2State : Swift.String, Swift.Codable {
  case SHOW
  case HIDE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.PaymentMethodFormV2State {
  public init?(response: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Profile.PaymentMethodFormV2?)
}
extension SharedModels.NomoAPI {
  public struct PaymentMethodFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.PaymentMethodType> {
      get
    }
    public var name: Swift.String {
      get
    }
    public var pngIconUrl: Swift.String? {
      get
    }
    public var paymentMethodData: SharedModels.NomoAPI.PaymentMethodFragment.PaymentMethodData {
      get
    }
    public struct PaymentMethodData : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var maskedNumber: Swift.String {
        get
      }
      public var processor: Swift.String {
        get
      }
      public var expirationDate: Swift.String? {
        get
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class PaymentMethodQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.PaymentMethodQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var paymentMethod: [SharedModels.NomoAPI.PaymentMethodQuery.Data.PaymentMethod] {
        get
      }
      public struct PaymentMethod : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.PaymentMethodType> {
          get
        }
        public var name: Swift.String {
          get
        }
        public var pngIconUrl: Swift.String? {
          get
        }
        public var paymentMethodData: SharedModels.NomoAPI.PaymentMethodFragment.PaymentMethodData {
          get
        }
        public struct Fragments : ApolloAPI.FragmentContainer {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public var paymentMethodFragment: SharedModels.NomoAPI.PaymentMethodFragment {
            get
          }
        }
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public enum PaymentMethodType : Swift.String, ApolloAPI.EnumType {
    case card
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.PaymentMethodType]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.PaymentMethodType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public enum PaymentStatus : Swift.String, ApolloAPI.EnumType {
    case paid
    case failed
    case pending
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.PaymentStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.PaymentStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum StatusPayment : Swift.String, Swift.Codable {
  case PAID
  case FAILED
  case PENDING
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.StatusPayment {
  public init(response: SharedModels.NomoAPI.PaymentStatus?)
}
extension SharedModels.NomoAPI.Objects {
  public static let Phone: ApolloAPI.Object
}
public struct Phone : Swift.Codable {
  public var countryCode: Swift.String
  public var areaCode: Swift.String
  public var phoneNumber: Swift.String
  public static let none: SharedModels.Phone
  public init(countryCode: Swift.String, areaCode: Swift.String, phoneNumber: Swift.String)
  public func getPhoneNumberWithoutSeparator() -> Swift.String
  public func getFullPhoneNumberWithSignal() -> Swift.String
  public func getFullPhoneNumberWithoutSignal() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.Phone {
  public init(response: SharedModels.NomoAPI.LegalPersonFragment.ContactPhone)
}
extension SharedModels.Phone {
  public init(response: SharedModels.NomoAPI.LineQuery.Data.Line)
}
extension SharedModels.Phone {
  public init?(response: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine.Line?)
}
extension SharedModels.Phone {
  public init(response: SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest)
}
extension Swift.Array where Element == SharedModels.Phone {
  public init(response: [SharedModels.NomoAPI.LegalPersonFragment.ContactPhone])
}
extension SharedModels.NomoAPI {
  public struct PhoneFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var countryCode: Swift.String {
      get
    }
    public var areaCode: Swift.String {
      get
    }
    public var phoneNumber: Swift.String {
      get
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct Portability : Swift.Codable {
  public var id: Swift.String
  public var lineId: Swift.String
  public var requestedAt: Foundation.Date
  public var requestedBy: Swift.String
  public var dueDate: Foundation.Date?
  public var executedAt: Foundation.Date?
  public var portedNumber: SharedModels.Phone
  public var portedNumberHolder: SharedModels.LegalPerson
  public var status: SharedModels.PortabilityRequestStatus
  public var errors: [SharedModels.PortabilityRequestError]
  public init(id: Swift.String, lineId: Swift.String, requestedAt: Foundation.Date, requestedBy: Swift.String, dueDate: Foundation.Date?, executedAt: Foundation.Date?, portedNumber: SharedModels.Phone, portedNumberHolder: SharedModels.LegalPerson, status: SharedModels.PortabilityRequestStatus, errors: [SharedModels.PortabilityRequestError])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Array where Element == SharedModels.Portability {
  public init(response: [SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest])
}
extension SharedModels.Portability {
  public init(response: SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest)
}
public enum PortabilityCardState : Swift.String, Swift.Codable {
  case REQUEST
  case FOLLOW_UP
  case REQUEST_ERROR
  case REQUEST_ERROR_WITH_RETRY
  case HIDE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.PortabilityCardState {
  public init?(response: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.NumberPortabilityCard?)
}
extension SharedModels.NomoAPI {
  public struct PortabilityErrorFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var code: Swift.String {
      get
    }
    public var description: Swift.String {
      get
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class PortabilityQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.PortabilityQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var numberPortabilityRequests: [SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest?] {
        get
      }
      public struct NumberPortabilityRequest : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var id: Swift.String {
          get
        }
        public var lineId: Swift.String {
          get
        }
        public var requestedAt: Swift.String {
          get
        }
        public var requestedBy: Swift.String {
          get
        }
        public var dueDate: Swift.String? {
          get
        }
        public var executedAt: Swift.String? {
          get
        }
        public var portedNumber: SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest.PortedNumber {
          get
        }
        public var portedNumberHolder: SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest.PortedNumberHolder {
          get
        }
        public var status: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.NumberPortabilityRequestStatus> {
          get
        }
        public var errors: [SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest.Error_SelectionSet?]? {
          get
        }
        public struct Fragments : ApolloAPI.FragmentContainer {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public var portabilityRequestFragment: SharedModels.NomoAPI.PortabilityRequestFragment {
            get
          }
        }
        public struct PortedNumber : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public var countryCode: Swift.String {
            get
          }
          public var areaCode: Swift.String {
            get
          }
          public var phoneNumber: Swift.String {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct PortedNumberHolder : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public var id: Swift.String? {
            get
          }
          public var taxId: Swift.String {
            get
          }
          public var name: Swift.String? {
            get
          }
          public var birthdate: Swift.String? {
            get
          }
          public var motherName: Swift.String? {
            get
          }
          public var contactPhones: [SharedModels.NomoAPI.PortabilityQuery.Data.NumberPortabilityRequest.PortedNumberHolder.ContactPhone?]? {
            get
          }
          public var contactEmails: [Swift.String?]? {
            get
          }
          public var address: [SharedModels.NomoAPI.LegalPersonFragment.Address?]? {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var legalPersonFragment: SharedModels.NomoAPI.LegalPersonFragment {
              get
            }
          }
          public struct ContactPhone : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var countryCode: Swift.String {
              get
            }
            public var areaCode: Swift.String {
              get
            }
            public var phoneNumber: Swift.String {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct Error_SelectionSet : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public var code: Swift.String {
            get
          }
          public var description: Swift.String {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var portabilityErrorFragment: SharedModels.NomoAPI.PortabilityErrorFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct PortabilityRequestError : Swift.Codable {
  public var code: Swift.String
  public var description: Swift.String
  public init(code: Swift.String, description: Swift.String)
  public static let none: SharedModels.PortabilityRequestError
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.PortabilityRequestError {
  public init(response: SharedModels.NomoAPI.PortabilityRequestFragment.Error_SelectionSet)
}
extension Swift.Array where Element == SharedModels.PortabilityRequestError {
  public init(response: [SharedModels.NomoAPI.PortabilityRequestFragment.Error_SelectionSet])
}
extension SharedModels.NomoAPI {
  public struct PortabilityRequestFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var lineId: Swift.String {
      get
    }
    public var requestedAt: Swift.String {
      get
    }
    public var requestedBy: Swift.String {
      get
    }
    public var dueDate: Swift.String? {
      get
    }
    public var executedAt: Swift.String? {
      get
    }
    public var portedNumber: SharedModels.NomoAPI.PortabilityRequestFragment.PortedNumber {
      get
    }
    public var portedNumberHolder: SharedModels.NomoAPI.PortabilityRequestFragment.PortedNumberHolder {
      get
    }
    public var status: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.NumberPortabilityRequestStatus> {
      get
    }
    public var errors: [SharedModels.NomoAPI.PortabilityRequestFragment.Error_SelectionSet?]? {
      get
    }
    public struct PortedNumber : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var countryCode: Swift.String {
        get
      }
      public var areaCode: Swift.String {
        get
      }
      public var phoneNumber: Swift.String {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct PortedNumberHolder : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var id: Swift.String? {
        get
      }
      public var taxId: Swift.String {
        get
      }
      public var name: Swift.String? {
        get
      }
      public var birthdate: Swift.String? {
        get
      }
      public var motherName: Swift.String? {
        get
      }
      public var contactPhones: [SharedModels.NomoAPI.PortabilityRequestFragment.PortedNumberHolder.ContactPhone?]? {
        get
      }
      public var contactEmails: [Swift.String?]? {
        get
      }
      public var address: [SharedModels.NomoAPI.LegalPersonFragment.Address?]? {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var legalPersonFragment: SharedModels.NomoAPI.LegalPersonFragment {
          get
        }
      }
      public struct ContactPhone : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public var countryCode: Swift.String {
          get
        }
        public var areaCode: Swift.String {
          get
        }
        public var phoneNumber: Swift.String {
          get
        }
        public struct Fragments : ApolloAPI.FragmentContainer {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
            get
          }
        }
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct Error_SelectionSet : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var code: Swift.String {
        get
      }
      public var description: Swift.String {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var portabilityErrorFragment: SharedModels.NomoAPI.PortabilityErrorFragment {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum PortabilityRequestStatus : Swift.String, Swift.Codable {
  case CREATED
  case REQUESTED
  case ACCEPTED
  case AUTHORIZED
  case EXECUTED
  case REJECTED
  case NOT_AUTHORIZED
  case CANCELED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.PortabilityRequestStatus {
  public init(response: SharedModels.NomoAPI.NumberPortabilityRequestStatus?)
}
public enum PortabilityStatus {
  case notAuthorized(portability: SharedModels.Detail)
  case requested(portability: SharedModels.Detail)
  case approved(portability: SharedModels.Detail)
  case concluded(portability: SharedModels.Detail)
  public enum Case {
    case notAuthorized, requested, approved, concluded
    public static func == (a: SharedModels.PortabilityStatus.Case, b: SharedModels.PortabilityStatus.Case) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var `case`: SharedModels.PortabilityStatus.Case {
    get
  }
}
extension SharedModels.PortabilityStatus : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let Product: ApolloAPI.Object
}
public struct Product : Swift.Codable {
  public let id: Swift.String
  public let name: Swift.String
  public let type: SharedModels.UsageProductType
  public let priceInCents: Swift.Int
  public let totalDataAcquiredInGibibytes: Swift.String
  public init(id: Swift.String, name: Swift.String, type: SharedModels.UsageProductType, priceInCents: Swift.Int, totalDataAcquiredInGibibytes: Swift.String)
  public static let none: SharedModels.Product
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.Product {
  public init(response: SharedModels.NomoAPI.ProductsAvailableQuery.Data.Topup1GBProductDetails)
}
extension SharedModels.NomoAPI {
  public struct ProductFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var name: Swift.String {
      get
    }
    public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType>? {
      get
    }
    public var priceInCents: Swift.Int {
      get
    }
    public var totalDataAcquiredInGibibytes: Swift.String {
      get
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public enum ProductType : Swift.String, ApolloAPI.EnumType {
    case recurring
    case topup
    case addon
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.ProductType]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.ProductType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public enum ProductUnitType : Swift.String, ApolloAPI.EnumType {
    case sms
    case dataInMebibytes
    case voiceInMinutes
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.ProductUnitType]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.ProductUnitType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class ProductsAvailableQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public init()
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var topup1GBProductDetails: SharedModels.NomoAPI.ProductsAvailableQuery.Data.Topup1GBProductDetails? {
        get
      }
      public struct Topup1GBProductDetails : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var id: Swift.String {
          get
        }
        public var name: Swift.String {
          get
        }
        public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType>? {
          get
        }
        public var priceInCents: Swift.Int {
          get
        }
        public var totalDataAcquiredInGibibytes: Swift.String {
          get
        }
        public struct Fragments : ApolloAPI.FragmentContainer {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public var productFragment: SharedModels.NomoAPI.ProductFragment {
            get
          }
        }
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let ProfileBottomSheet: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public enum ProfileBottomSheetItems : Swift.String, ApolloAPI.EnumType {
    case requestPortability
    case giveFeedback
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.ProfileBottomSheetItems]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.ProfileBottomSheetItems] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let ProfileScreen: ApolloAPI.Object
}
public enum ProfileState : Swift.String, Swift.Codable {
  case REQUEST_PORTABILITY
  case GIVE_FEEDBACK
  case HIDE_ALL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.ProfileState {
  public init(response: SharedModels.NomoAPI.ProfileBottomSheetItems?)
}
extension Swift.Array where Element == SharedModels.ProfileState {
  public init(response: [ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProfileBottomSheetItems>?])
}
extension SharedModels.NomoAPI {
  public struct PurchaseProductInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, quantity: Swift.Int)
    public var lineId: Swift.String {
      get
      set
    }
    public var quantity: Swift.Int {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class PurchaseProductMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.PurchaseProductInput
    public init(input: SharedModels.NomoAPI.PurchaseProductInput)
    public var __variables: SharedModels.NomoAPI.PurchaseProductMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var purchase1GBTopupProduct: SharedModels.NomoAPI.PurchaseProductMutation.Data.Purchase1GBTopupProduct? {
        get
      }
      public struct Purchase1GBTopupProduct : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let PurchaseProductPayload: ApolloAPI.Object
}
public struct PurchaseTopup : Swift.Codable {
  public let topupId: Swift.String
  public let quantity: Swift.Int
  public init(topupId: Swift.String, quantity: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI.TopupInput {
  public init(response: SharedModels.PurchaseTopup)
}
extension Swift.Array where Element == SharedModels.NomoAPI.TopupInput {
  public init(response: [SharedModels.PurchaseTopup])
}
extension SharedModels.NomoAPI {
  public struct PurchaseTopupInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(lineId: Swift.String, topups: [SharedModels.NomoAPI.TopupInput])
    public var lineId: Swift.String {
      get
      set
    }
    public var topups: [SharedModels.NomoAPI.TopupInput] {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class PurchaseTopupMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.PurchaseTopupInput
    public init(input: SharedModels.NomoAPI.PurchaseTopupInput)
    public var __variables: SharedModels.NomoAPI.PurchaseTopupMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var purchaseTopup: SharedModels.NomoAPI.PurchaseTopupMutation.Data.PurchaseTopup {
        get
      }
      public struct PurchaseTopup : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let PurchaseTopupPayload: ApolloAPI.Object
}
public struct PurchaseTopupPayload : Swift.Codable {
  public var success: Swift.Bool
  public var message: Swift.String
  public init(success: Swift.Bool, message: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.PurchaseTopupPayload {
  public init(response: SharedModels.NomoAPI.PurchaseTopupMutation.Data.PurchaseTopup)
}
extension SharedModels.NomoAPI.Objects {
  public static let PurchaseTopupScreen: ApolloAPI.Object
}
public struct PurchaseTopupScreen : Swift.Codable {
  public let currentTopups: [SharedModels.UsageByTopupUnitType]
  public let catalogProducts: [SharedModels.CatalogProduct]
  public init(currentTopups: [SharedModels.UsageByTopupUnitType], catalogProducts: [SharedModels.CatalogProduct])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.PurchaseTopupScreen {
  public init(response: SharedModels.NomoAPI.PurchaseTopupScreenQuery.Data.PurchaseTopupScreen)
}
extension SharedModels.NomoAPI {
  public class PurchaseTopupScreenQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.PurchaseTopupScreenQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var purchaseTopupScreen: SharedModels.NomoAPI.PurchaseTopupScreenQuery.Data.PurchaseTopupScreen {
        get
      }
      public struct PurchaseTopupScreen : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var currentTopups: [SharedModels.NomoAPI.PurchaseTopupScreenQuery.Data.PurchaseTopupScreen.CurrentTopup] {
          get
        }
        public var catalogProducts: [SharedModels.NomoAPI.PurchaseTopupScreenQuery.Data.PurchaseTopupScreen.CatalogProduct] {
          get
        }
        public struct CurrentTopup : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
            get
          }
          public var unitAvailableAmount: Swift.Int {
            get
          }
          public typealias Fragments = ApolloAPI.NoFragments
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct CatalogProduct : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var name: Swift.String {
            get
          }
          public var description: Swift.String {
            get
          }
          public var priceInCents: Swift.Int {
            get
          }
          public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
            get
          }
          public var unitAmount: Swift.Int {
            get
          }
          public var isCurrentSubscriptionProduct: Swift.Bool {
            get
          }
          public var isCustomProduct: Swift.Bool {
            get
          }
          public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
            get
          }
          public var availableToCustomer: Swift.Bool {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var catalogProductFragment: SharedModels.NomoAPI.CatalogProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let Query: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public struct RedeemReferralBonusInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(id: Swift.String, lineId: Swift.String)
    public var id: Swift.String {
      get
      set
    }
    public var lineId: Swift.String {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct RedeemReferralInput : Swift.Codable {
  public let id: Swift.String
  public init(id: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI {
  public class RedeemReferralBonusMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.RedeemReferralBonusInput
    public init(input: SharedModels.NomoAPI.RedeemReferralBonusInput)
    public var __variables: SharedModels.NomoAPI.RedeemReferralBonusMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var redeemReferralBonus: SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus {
        get
      }
      public struct RedeemReferralBonus : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public var redeemedProduct: SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus.RedeemedProduct? {
          get
        }
        public var referralBonus: SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus.ReferralBonus? {
          get
        }
        public struct RedeemedProduct : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var dataInGibibytes: Swift.String {
            get
          }
          public var redeemedDate: Swift.String? {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var referralProductFragment: SharedModels.NomoAPI.ReferralProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct ReferralBonus : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var totalDataInGibibytes: Swift.String {
            get
          }
          public var redeemedProducts: [SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus.ReferralBonus.RedeemedProduct?] {
            get
          }
          public var unredeemedProducts: [SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus.ReferralBonus.UnredeemedProduct?] {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var referralBonusFragment: SharedModels.NomoAPI.ReferralBonusFragment {
              get
            }
          }
          public struct RedeemedProduct : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var id: Swift.String {
              get
            }
            public var dataInGibibytes: Swift.String {
              get
            }
            public var redeemedDate: Swift.String? {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var referralProductFragment: SharedModels.NomoAPI.ReferralProductFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct UnredeemedProduct : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var id: Swift.String {
              get
            }
            public var dataInGibibytes: Swift.String {
              get
            }
            public var redeemedDate: Swift.String? {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var referralProductFragment: SharedModels.NomoAPI.ReferralProductFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let RedeemReferralBonusPayload: ApolloAPI.Object
}
public struct RedeemReferralBonusPayload : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String
  public let bonusReferral: SharedModels.ReferralBonus
  public let referralProduct: SharedModels.ReferralProduct
  public init(success: Swift.Bool, message: Swift.String, bonusReferral: SharedModels.ReferralBonus, referralProduct: SharedModels.ReferralProduct)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.RedeemReferralBonusPayload {
  public init(response: SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus)
}
public struct Referral : Swift.Codable {
  public let bonus: SharedModels.ReferralBonus
  public let state: SharedModels.ReferralRedeemState
  public let link: Swift.String
  public static let none: SharedModels.Referral
  public init(bonus: SharedModels.ReferralBonus, state: SharedModels.ReferralRedeemState, link: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI.Objects {
  public static let ReferralBonus: ApolloAPI.Object
}
public struct ReferralBonus : Swift.Codable {
  public var totalDataInGibibytes: Swift.String
  public var redeemedProducts: [SharedModels.ReferralProduct]
  public var unredeemedProducts: [SharedModels.ReferralProduct]
  public static let none: SharedModels.ReferralBonus
  public init(totalDataInGibibytes: Swift.String, redeemedProducts: [SharedModels.ReferralProduct], unredeemedProducts: [SharedModels.ReferralProduct])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.ReferralBonus {
  public init(response: SharedModels.NomoAPI.ReferralBonusQuery.Data.ReferralBonus)
  public init(response: SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus)
  public init(response: SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus.ReferralBonus?)
}
extension SharedModels.NomoAPI {
  public struct ReferralBonusFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var totalDataInGibibytes: Swift.String {
      get
    }
    public var redeemedProducts: [SharedModels.NomoAPI.ReferralBonusFragment.RedeemedProduct?] {
      get
    }
    public var unredeemedProducts: [SharedModels.NomoAPI.ReferralBonusFragment.UnredeemedProduct?] {
      get
    }
    public struct RedeemedProduct : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var id: Swift.String {
        get
      }
      public var dataInGibibytes: Swift.String {
        get
      }
      public var redeemedDate: Swift.String? {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var referralProductFragment: SharedModels.NomoAPI.ReferralProductFragment {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct UnredeemedProduct : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var id: Swift.String {
        get
      }
      public var dataInGibibytes: Swift.String {
        get
      }
      public var redeemedDate: Swift.String? {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var referralProductFragment: SharedModels.NomoAPI.ReferralProductFragment {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class ReferralBonusQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.ReferralBonusQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var referralBonus: SharedModels.NomoAPI.ReferralBonusQuery.Data.ReferralBonus {
        get
      }
      public struct ReferralBonus : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var totalDataInGibibytes: Swift.String {
          get
        }
        public var redeemedProducts: [SharedModels.NomoAPI.ReferralBonusQuery.Data.ReferralBonus.RedeemedProduct?] {
          get
        }
        public var unredeemedProducts: [SharedModels.NomoAPI.ReferralBonusQuery.Data.ReferralBonus.UnredeemedProduct?] {
          get
        }
        public struct Fragments : ApolloAPI.FragmentContainer {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public var referralBonusFragment: SharedModels.NomoAPI.ReferralBonusFragment {
            get
          }
        }
        public struct RedeemedProduct : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public var id: Swift.String {
            get
          }
          public var dataInGibibytes: Swift.String {
            get
          }
          public var redeemedDate: Swift.String? {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var referralProductFragment: SharedModels.NomoAPI.ReferralProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct UnredeemedProduct : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public var id: Swift.String {
            get
          }
          public var dataInGibibytes: Swift.String {
            get
          }
          public var redeemedDate: Swift.String? {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var referralProductFragment: SharedModels.NomoAPI.ReferralProductFragment {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let ReferralCard: ApolloAPI.Object
}
public struct ReferralRedeemCard : Swift.Codable {
  public let referralState: SharedModels.ReferralRedeemState
  public let referralLink: Swift.String
  public init(referralState: SharedModels.ReferralRedeemState, referralLink: Swift.String)
  public static let none: SharedModels.ReferralRedeemCard
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ReferralRedeemState : Swift.String, Swift.Codable {
  case HIDE
  case SHOW
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.ReferralRedeemCard {
  public init?(response: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.ReferralCard?)
}
extension SharedModels.ReferralRedeemState {
  public init(response: SharedModels.NomoAPI.ReferralState?)
}
extension SharedModels.NomoAPI.Objects {
  public static let ReferralProduct: ApolloAPI.Object
}
public struct ReferralProduct : Swift.Codable {
  public let id: Swift.String
  public let dataInGibibytes: Swift.String
  public let redeemedDate: Foundation.Date?
  public var redeemedDateFormatted: Swift.String {
    get
  }
  public init(id: Swift.String, dataInGibibytes: Swift.String, redeemedDate: Foundation.Date?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.ReferralProduct {
  public init(response: SharedModels.NomoAPI.RedeemReferralBonusMutation.Data.RedeemReferralBonus.RedeemedProduct?)
}
extension SharedModels.ReferralProduct {
  public init(response: SharedModels.NomoAPI.ReferralProductFragment)
}
extension SharedModels.ReferralProduct {
  public init(response: SharedModels.NomoAPI.ReferralBonusFragment.UnredeemedProduct.Fragments)
}
extension SharedModels.ReferralProduct {
  public init(response: SharedModels.NomoAPI.ReferralBonusFragment.RedeemedProduct.Fragments)
}
extension Swift.Array where Element == SharedModels.ReferralProduct {
  public init(response: [SharedModels.NomoAPI.ReferralBonusFragment.UnredeemedProduct])
  public init(response: [SharedModels.NomoAPI.ReferralBonusFragment.RedeemedProduct])
}
extension SharedModels.NomoAPI {
  public struct ReferralProductFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var dataInGibibytes: Swift.String {
      get
    }
    public var redeemedDate: Swift.String? {
      get
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public enum ReferralState : Swift.String, ApolloAPI.EnumType {
    case hide
    case show
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.ReferralState]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.ReferralState] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public class RequestAppStateMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.DismissNumberPortabilityCardRequestInput
    public init(input: SharedModels.NomoAPI.DismissNumberPortabilityCardRequestInput)
    public var __variables: SharedModels.NomoAPI.RequestAppStateMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var dismissNumberPortabilityCard: SharedModels.NomoAPI.RequestAppStateMutation.Data.DismissNumberPortabilityCard? {
        get
      }
      public struct DismissNumberPortabilityCard : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let RequestNumberPortabilityPayload: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public class RequestPortabilityMutation : ApolloAPI.GraphQLMutation {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var input: SharedModels.NomoAPI.NumberPortabilityRequestInput
    public init(input: SharedModels.NomoAPI.NumberPortabilityRequestInput)
    public var __variables: SharedModels.NomoAPI.RequestPortabilityMutation.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var requestNumberPortability: SharedModels.NomoAPI.RequestPortabilityMutation.Data.RequestNumberPortability? {
        get
      }
      public struct RequestNumberPortability : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var success: Swift.Bool {
          get
        }
        public var message: Swift.String {
          get
        }
        public var numberPortabilityRequest: SharedModels.NomoAPI.RequestPortabilityMutation.Data.RequestNumberPortability.NumberPortabilityRequest? {
          get
        }
        public struct NumberPortabilityRequest : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var lineId: Swift.String {
            get
          }
          public var requestedAt: Swift.String {
            get
          }
          public var requestedBy: Swift.String {
            get
          }
          public var dueDate: Swift.String? {
            get
          }
          public var executedAt: Swift.String? {
            get
          }
          public var portedNumber: SharedModels.NomoAPI.RequestPortabilityMutation.Data.RequestNumberPortability.NumberPortabilityRequest.PortedNumber {
            get
          }
          public var portedNumberHolder: SharedModels.NomoAPI.RequestPortabilityMutation.Data.RequestNumberPortability.NumberPortabilityRequest.PortedNumberHolder {
            get
          }
          public var status: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.NumberPortabilityRequestStatus> {
            get
          }
          public var errors: [SharedModels.NomoAPI.RequestPortabilityMutation.Data.RequestNumberPortability.NumberPortabilityRequest.Error_SelectionSet?]? {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var portabilityRequestFragment: SharedModels.NomoAPI.PortabilityRequestFragment {
              get
            }
          }
          public struct PortedNumber : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var countryCode: Swift.String {
              get
            }
            public var areaCode: Swift.String {
              get
            }
            public var phoneNumber: Swift.String {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct PortedNumberHolder : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var id: Swift.String? {
              get
            }
            public var taxId: Swift.String {
              get
            }
            public var name: Swift.String? {
              get
            }
            public var birthdate: Swift.String? {
              get
            }
            public var motherName: Swift.String? {
              get
            }
            public var contactPhones: [SharedModels.NomoAPI.RequestPortabilityMutation.Data.RequestNumberPortability.NumberPortabilityRequest.PortedNumberHolder.ContactPhone?]? {
              get
            }
            public var contactEmails: [Swift.String?]? {
              get
            }
            public var address: [SharedModels.NomoAPI.LegalPersonFragment.Address?]? {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var legalPersonFragment: SharedModels.NomoAPI.LegalPersonFragment {
                get
              }
            }
            public struct ContactPhone : SharedModels.NomoAPI.SelectionSet {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public static var __parentType: any ApolloAPI.ParentType {
                get
              }
              public var countryCode: Swift.String {
                get
              }
              public var areaCode: Swift.String {
                get
              }
              public var phoneNumber: Swift.String {
                get
              }
              public struct Fragments : ApolloAPI.FragmentContainer {
                public let __data: ApolloAPI.DataDict
                public init(_dataDict: ApolloAPI.DataDict)
                public var phoneFragment: SharedModels.NomoAPI.PhoneFragment {
                  get
                }
              }
              public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
              public var hashValue: Swift.Int {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public struct Error_SelectionSet : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var code: Swift.String {
              get
            }
            public var description: Swift.String {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var portabilityErrorFragment: SharedModels.NomoAPI.PortabilityErrorFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let RetryPaymentPayload: ApolloAPI.Object
}
public protocol NomoAPI_SelectionSet : ApolloAPI.RootSelectionSet where Self.Schema == SharedModels.NomoAPI.SchemaMetadata {
}
public protocol NomoAPI_InlineFragment : ApolloAPI.InlineFragment where Self.Schema == SharedModels.NomoAPI.SchemaMetadata {
}
public protocol NomoAPI_MutableSelectionSet : ApolloAPI.MutableRootSelectionSet where Self.Schema == SharedModels.NomoAPI.SchemaMetadata {
}
public protocol NomoAPI_MutableInlineFragment : ApolloAPI.InlineFragment, ApolloAPI.MutableSelectionSet where Self.Schema == SharedModels.NomoAPI.SchemaMetadata {
}
extension SharedModels.NomoAPI {
  public typealias ID = Swift.String
  public typealias SelectionSet = SharedModels.NomoAPI_SelectionSet
  public typealias InlineFragment = SharedModels.NomoAPI_InlineFragment
  public typealias MutableSelectionSet = SharedModels.NomoAPI_MutableSelectionSet
  public typealias MutableInlineFragment = SharedModels.NomoAPI_MutableInlineFragment
  public enum SchemaMetadata : ApolloAPI.SchemaMetadata {
    public static let configuration: any ApolloAPI.SchemaConfiguration.Type
    public static func objectType(forTypename typename: Swift.String) -> ApolloAPI.Object?
  }
  public enum Objects {
  }
  public enum Interfaces {
  }
  public enum Unions {
  }
}
public struct SignIn : Swift.Codable {
  public let email: Swift.String
  public static let none: SharedModels.SignIn
  public init(email: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI.Objects {
  public static let SimCard: ApolloAPI.Object
}
public struct SimCard : Swift.Codable {
  public var iccId: Swift.String
  public static let none: SharedModels.SimCard
  public init(iccId: Swift.String)
  public func dropLast3Digits() -> Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.SimCard {
  public init(response: SharedModels.NomoAPI.LineQuery.Data.Line)
}
extension SharedModels.SimCard {
  public init?(response: SharedModels.NomoAPI.ActivateLineMutation.Data.ActivateLine.Line?)
}
extension SharedModels.NomoAPI.Objects {
  public static let SimDeliveryCard: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public enum SimDeliveryCardState : Swift.String, ApolloAPI.EnumType {
    case shipped
    case hide
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.SimDeliveryCardState]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.SimDeliveryCardState] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum ActivateSimDeliveryCardState : Swift.String, Swift.Codable {
  case SHIPPED
  case HIDE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.ActivateSimDeliveryCardState {
  public init(response: SharedModels.NomoAPI.AppStateQuery.Data.AppState.Home.SimDeliveryCard?)
}
public struct Subscription : Swift.Codable {
  public let lastPaidInvoiceDate: Foundation.Date?
  public let nextPaymentInvoiceDueDate: Foundation.Date?
  public let currentSubscriptionConfig: SharedModels.SubscriptionConfig?
  public let scheduledSubscriptionConfig: SharedModels.SubscriptionConfig?
  public let isWithinWithdrawalPeriod: Swift.Bool
  public static let none: SharedModels.Subscription
  public init(lastPaidInvoiceDate: Foundation.Date?, nextPaymentInvoiceDueDate: Foundation.Date?, currentSubscriptionConfig: SharedModels.SubscriptionConfig?, scheduledSubscriptionConfig: SharedModels.SubscriptionConfig?, isWithinWithdrawalPeriod: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.Subscription {
  public var isCustomProduct: Swift.Bool {
    get
  }
  public var getCurrentPlanName: Swift.String {
    get
  }
  public var recurringDataAcquiredInGibibytes: Swift.String {
    get
  }
  public var recurringVoiceAcquiredInMinutes: Swift.String {
    get
  }
  public var collapsedRecurringVoiceAcquiredInMinutes: Swift.String {
    get
  }
  public var recurringSMSAcquiredInMinutes: Swift.String {
    get
  }
}
extension SharedModels.Subscription {
  public init(response: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2)
}
public struct SubscriptionAddonInput : Swift.Codable {
  public let productId: Swift.String
  public let quantity: Swift.Int
  public init(productId: Swift.String, quantity: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.NomoAPI.AddonInput {
  public init(addon: SharedModels.SubscriptionAddonInput)
}
extension Swift.Array where Element == SharedModels.NomoAPI.AddonInput {
  public init(addons: [SharedModels.SubscriptionAddonInput]?)
}
public struct SubscriptionCancelConfigPayload : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String
  public init(success: Swift.Bool, message: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.SubscriptionCancelConfigPayload {
  public init(response: SharedModels.NomoAPI.CancelSubscriptionConfigMutation.Data.CancelSubscriptionConfig)
}
public struct SubscriptionConfig : Swift.Codable {
  public let id: Swift.String
  public let totalPriceInCents: Swift.Int
  public let isCustomProduct: Swift.Bool
  public let product: SharedModels.SubscriptionProduct
  public let addons: [SharedModels.SubscriptionProductGroup]
  public let approvedAt: Foundation.Date
  public let validFrom: Foundation.Date
  public init(id: Swift.String, totalPriceInCents: Swift.Int, isCustomProduct: Swift.Bool, product: SharedModels.SubscriptionProduct, addons: [SharedModels.SubscriptionProductGroup], approvedAt: Foundation.Date, validFrom: Foundation.Date)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.SubscriptionConfig {
  public var totalPriceInCentsFormatted: Swift.String {
    get
  }
  public var validFromFormatted: Swift.String {
    get
  }
  public var getScheduledPlanName: Swift.String {
    get
  }
  public var sumAddonsUnitAcquiredAmount: Swift.Int {
    get
  }
  public var getAddonsDataInGibibytesAcquiredAmount: Swift.String {
    get
  }
  public var getAddonsVoiceInMinutesAcquiredAmount: Swift.String {
    get
  }
  public var getAddonsSMSAcquiredAmount: Swift.String {
    get
  }
  public var getTotalRecurringDataInGibibytesAcquired: Swift.String {
    get
  }
}
extension SharedModels.SubscriptionConfig {
  public init?(response: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2.ScheduledSubscriptionConfig?)
}
extension SharedModels.SubscriptionConfig {
  public init?(response: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2.CurrentSubscriptionConfig?)
}
extension SharedModels.NomoAPI {
  public struct SubscriptionConfigFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var totalPriceInCents: Swift.Int {
      get
    }
    public var isCustomProduct: Swift.Bool {
      get
    }
    public var product: SharedModels.NomoAPI.SubscriptionConfigFragment.Product {
      get
    }
    public var addons: [SharedModels.NomoAPI.SubscriptionConfigFragment.Addon] {
      get
    }
    public var approvedAt: Swift.String {
      get
    }
    public var validFrom: Swift.String {
      get
    }
    public struct Product : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var id: Swift.String {
        get
      }
      public var name: Swift.String {
        get
      }
      public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType>? {
        get
      }
      public var unitAcquiredAmount: Swift.Int? {
        get
      }
      public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
        get
      }
      public struct Fragments : ApolloAPI.FragmentContainer {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public var subscriptionProductFragment: SharedModels.NomoAPI.SubscriptionProductFragment {
          get
        }
      }
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct Addon : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var quantity: Swift.Int {
        get
      }
      public var product: SharedModels.NomoAPI.SubscriptionConfigFragment.Addon.Product {
        get
      }
      public struct Product : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var id: Swift.String {
          get
        }
        public var name: Swift.String {
          get
        }
        public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType>? {
          get
        }
        public var unitAcquiredAmount: Swift.Int? {
          get
        }
        public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
          get
        }
        public struct Fragments : ApolloAPI.FragmentContainer {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public var subscriptionProductFragment: SharedModels.NomoAPI.SubscriptionProductFragment {
            get
          }
        }
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct SubscriptionConfigPayload : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String
  public let newCycleOperationalDate: Foundation.Date
  public let newProduct: SharedModels.CatalogProduct
  public let newAddons: [SharedModels.CatalogProduct]
  public let newRenewalDayOfMonth: Swift.String
  public let oldCycleEndDate: Foundation.Date
  public let oldRenewalDayOfMonth: Swift.String
  public let subscriptionConfigId: Swift.String
  public init(success: Swift.Bool, message: Swift.String, newCycleOperationalDate: Foundation.Date, newProduct: SharedModels.CatalogProduct, newAddons: [SharedModels.CatalogProduct], newRenewalDayOfMonth: Swift.String, oldCycleEndDate: Foundation.Date, oldRenewalDayOfMonth: Swift.String, subscriptionConfigId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.SubscriptionConfigPayload {
  public var newCycleOperationalDayFormatted: Swift.String {
    get
  }
  public var newCycleOperationalDateFormatted: Swift.String {
    get
  }
  public var totalPriceInCents: Swift.String {
    get
  }
  public var totalUnitAmountInGibibytes: Swift.String {
    get
  }
  public var totalSMS: Swift.String {
    get
  }
  public var totalVoiceInMinutes: Swift.String {
    get
  }
}
extension SharedModels.SubscriptionConfigPayload {
  public init(response: SharedModels.NomoAPI.ActivateSubscriptionConfigV2PayloadMutation.Data.ActivateSubscriptionConfigV2)
}
extension SharedModels.SubscriptionConfigPayload {
  public init(response: SharedModels.NomoAPI.CreateSubscriptionConfigProposalV2Mutation.Data.CreateSubscriptionConfigProposalV2)
}
extension SharedModels.NomoAPI.Objects {
  public static let SubscriptionConfigV2: ApolloAPI.Object
}
public struct SubscriptionProduct : Swift.Codable {
  public let id: Swift.String
  public let name: Swift.String
  public let description: SharedModels.CatalogDescription
  public let unitType: SharedModels.SubscriptionProductUnitType?
  public let unitAcquiredAmount: Swift.Int?
  public let type: SharedModels.SubscriptionProductType
  public init(id: Swift.String, name: Swift.String, description: SharedModels.CatalogDescription, unitType: SharedModels.SubscriptionProductUnitType?, unitAcquiredAmount: Swift.Int?, type: SharedModels.SubscriptionProductType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.SubscriptionProduct {
  public init(response: SharedModels.NomoAPI.SubscriptionConfigFragment.Addon.Product)
}
extension SharedModels.SubscriptionProduct {
  public init(response: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2.CurrentSubscriptionConfig.Product)
}
extension SharedModels.SubscriptionProduct {
  public init(response: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2.ScheduledSubscriptionConfig.Product)
}
extension Swift.Array where Element == SharedModels.SubscriptionProduct {
  public init(subscriptionProductGroups: [SharedModels.SubscriptionProductGroup])
}
extension SharedModels.NomoAPI {
  public struct SubscriptionProductFragment : SharedModels.NomoAPI.SelectionSet, ApolloAPI.Fragment {
    public static var fragmentDefinition: Swift.StaticString {
      get
    }
    public let __data: ApolloAPI.DataDict
    public init(_dataDict: ApolloAPI.DataDict)
    public static var __parentType: any ApolloAPI.ParentType {
      get
    }
    public static var __selections: [ApolloAPI.Selection] {
      get
    }
    public var id: Swift.String {
      get
    }
    public var name: Swift.String {
      get
    }
    public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType>? {
      get
    }
    public var unitAcquiredAmount: Swift.Int? {
      get
    }
    public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
      get
    }
    public typealias Fragments = ApolloAPI.NoFragments
    public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct SubscriptionProductGroup : Swift.Codable {
  public let quantity: Swift.Int
  public let product: SharedModels.SubscriptionProduct?
  public init(quantity: Swift.Int, product: SharedModels.SubscriptionProduct?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Array where Element == SharedModels.SubscriptionProductGroup {
  public init(response: [SharedModels.NomoAPI.SubscriptionConfigFragment.Addon])
}
extension SharedModels.NomoAPI.Objects {
  public static let SubscriptionProductGroupV2: ApolloAPI.Object
}
public enum SubscriptionProductType : Swift.String, Swift.Codable {
  case RECURRING
  case TOPUP
  case ADDON
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.SubscriptionProductType {
  public init(response: SharedModels.NomoAPI.ProductType?)
}
public enum SubscriptionProductUnitType : Swift.String, Swift.Codable {
  case SMS
  case DATA_IN_MEBIBYTES
  case VOICE_IN_MINUTES
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.SubscriptionProductUnitType {
  public var name: Swift.String {
    get
  }
  public var unitMeasurement: Swift.String {
    get
  }
  public var sort: Swift.Int {
    get
  }
}
extension SharedModels.SubscriptionProductUnitType {
  public init(response: SharedModels.NomoAPI.ProductUnitType?)
}
public struct SubscriptionProductUsage : Swift.Codable {
  public let type: SharedModels.SubscriptionProductType
  public let unitAcquiredAmount: Swift.Int
  public let unitType: SharedModels.SubscriptionProductUnitType
  public let unitAvailableAmount: Swift.Int
  public let unitConsumedAmount: Swift.Int
  public let usageStartDate: Foundation.Date?
  public let usageEndDate: Foundation.Date?
  public init(type: SharedModels.SubscriptionProductType, unitAcquiredAmount: Swift.Int, unitType: SharedModels.SubscriptionProductUnitType, unitAvailableAmount: Swift.Int, unitConsumedAmount: Swift.Int, usageStartDate: Foundation.Date?, usageEndDate: Foundation.Date?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.SubscriptionProductUsage {
  public var usageStartDateDayMonthFormated: Swift.String {
    get
  }
  public var usageEndDateDayMonthFormated: Swift.String {
    get
  }
  public var usageStartDateFullFormated: Swift.String {
    get
  }
  public var usageEndDateFullFormated: Swift.String {
    get
  }
  public var unitAcquiredInGibibytes: Swift.Float {
    get
  }
  public var unitAvailableInGibibytes: Swift.Float {
    get
  }
}
extension Swift.Array where Element == SharedModels.SubscriptionProductUsage {
  public init(response: [SharedModels.NomoAPI.SubscriptionUsageReportQuery.Data.SubscriptionUsageReport.Usage])
}
extension SharedModels.NomoAPI.Objects {
  public static let SubscriptionProductUsageV2: ApolloAPI.Object
}
extension SharedModels.NomoAPI.Objects {
  public static let SubscriptionProductV2: ApolloAPI.Object
}
extension SharedModels.NomoAPI.Objects {
  public static let SubscriptionUsageReport: ApolloAPI.Object
}
public struct SubscriptionUsageReport : Swift.Codable {
  public let usages: [SharedModels.SubscriptionProductUsage]
  public let usageCardState: SharedModels.UsageReportCardState
  public let daysToRenewal: Swift.Int?
  public static let none: SharedModels.SubscriptionUsageReport
  public init(usages: [SharedModels.SubscriptionProductUsage], usageCardState: SharedModels.UsageReportCardState, daysToRenewal: Swift.Int?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.SubscriptionUsageReport {
  public var usagesDataInMebibytes: [SharedModels.SubscriptionProductUsage] {
    get
  }
  public var totalUnitAvailableInGibibytesFormatted: Swift.String {
    get
  }
  public var totalUnitAcquiredInGibibytesFormatted: Swift.String {
    get
  }
  public var totalUnitConsumedInGibibytes: Swift.Float {
    get
  }
  public var totalUnitAvailableVoiceInMinutes: Swift.String {
    get
  }
  public var totalUnitAvailableSMS: Swift.String {
    get
  }
  public var totalDataAvailableInPercentage: Swift.Float {
    get
  }
}
extension SharedModels.SubscriptionUsageReport {
  public init(response: SharedModels.NomoAPI.SubscriptionUsageReportQuery.Data.SubscriptionUsageReport)
}
extension SharedModels.NomoAPI {
  public class SubscriptionUsageReportQuery : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.SubscriptionUsageReportQuery.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var subscriptionUsageReport: SharedModels.NomoAPI.SubscriptionUsageReportQuery.Data.SubscriptionUsageReport {
        get
      }
      public struct SubscriptionUsageReport : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var usages: [SharedModels.NomoAPI.SubscriptionUsageReportQuery.Data.SubscriptionUsageReport.Usage] {
          get
        }
        public var usageCardState: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.UsageCardState> {
          get
        }
        public var daysToRenewal: Swift.Int? {
          get
        }
        public struct Usage : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
            get
          }
          public var unitAcquiredAmount: Swift.Int {
            get
          }
          public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType> {
            get
          }
          public var unitAvailableAmount: Swift.Int {
            get
          }
          public var unitConsumedAmount: Swift.Int {
            get
          }
          public var usageStartDate: Swift.String? {
            get
          }
          public var usageEndDate: Swift.String? {
            get
          }
          public typealias Fragments = ApolloAPI.NoFragments
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI.Objects {
  public static let SubscriptionV2: ApolloAPI.Object
}
extension SharedModels.NomoAPI {
  public class SubscriptionV2Query : ApolloAPI.GraphQLQuery {
    public static let operationName: Swift.String
    public static let operationDocument: ApolloAPI.OperationDocument
    public var lineId: Swift.String
    public init(lineId: Swift.String)
    public var __variables: SharedModels.NomoAPI.SubscriptionV2Query.Variables? {
      get
    }
    public struct Data : SharedModels.NomoAPI.SelectionSet {
      public let __data: ApolloAPI.DataDict
      public init(_dataDict: ApolloAPI.DataDict)
      public static var __parentType: any ApolloAPI.ParentType {
        get
      }
      public static var __selections: [ApolloAPI.Selection] {
        get
      }
      public var subscriptionV2: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2 {
        get
      }
      public struct SubscriptionV2 : SharedModels.NomoAPI.SelectionSet {
        public let __data: ApolloAPI.DataDict
        public init(_dataDict: ApolloAPI.DataDict)
        public static var __parentType: any ApolloAPI.ParentType {
          get
        }
        public static var __selections: [ApolloAPI.Selection] {
          get
        }
        public var lastPaidInvoiceDate: Swift.String? {
          get
        }
        public var nextPaymentInvoiceDueDate: Swift.String? {
          get
        }
        public var currentSubscriptionConfig: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2.CurrentSubscriptionConfig {
          get
        }
        public var scheduledSubscriptionConfig: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2.ScheduledSubscriptionConfig? {
          get
        }
        public var isWithinWithdrawalPeriod: Swift.Bool {
          get
        }
        public struct CurrentSubscriptionConfig : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var totalPriceInCents: Swift.Int {
            get
          }
          public var isCustomProduct: Swift.Bool {
            get
          }
          public var product: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2.CurrentSubscriptionConfig.Product {
            get
          }
          public var addons: [SharedModels.NomoAPI.SubscriptionConfigFragment.Addon] {
            get
          }
          public var approvedAt: Swift.String {
            get
          }
          public var validFrom: Swift.String {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var subscriptionConfigFragment: SharedModels.NomoAPI.SubscriptionConfigFragment {
              get
            }
          }
          public struct Product : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var id: Swift.String {
              get
            }
            public var name: Swift.String {
              get
            }
            public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType>? {
              get
            }
            public var unitAcquiredAmount: Swift.Int? {
              get
            }
            public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var subscriptionProductFragment: SharedModels.NomoAPI.SubscriptionProductFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public struct ScheduledSubscriptionConfig : SharedModels.NomoAPI.SelectionSet {
          public let __data: ApolloAPI.DataDict
          public init(_dataDict: ApolloAPI.DataDict)
          public static var __parentType: any ApolloAPI.ParentType {
            get
          }
          public static var __selections: [ApolloAPI.Selection] {
            get
          }
          public var id: Swift.String {
            get
          }
          public var totalPriceInCents: Swift.Int {
            get
          }
          public var isCustomProduct: Swift.Bool {
            get
          }
          public var product: SharedModels.NomoAPI.SubscriptionV2Query.Data.SubscriptionV2.ScheduledSubscriptionConfig.Product {
            get
          }
          public var addons: [SharedModels.NomoAPI.SubscriptionConfigFragment.Addon] {
            get
          }
          public var approvedAt: Swift.String {
            get
          }
          public var validFrom: Swift.String {
            get
          }
          public struct Fragments : ApolloAPI.FragmentContainer {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public var subscriptionConfigFragment: SharedModels.NomoAPI.SubscriptionConfigFragment {
              get
            }
          }
          public struct Product : SharedModels.NomoAPI.SelectionSet {
            public let __data: ApolloAPI.DataDict
            public init(_dataDict: ApolloAPI.DataDict)
            public static var __parentType: any ApolloAPI.ParentType {
              get
            }
            public var id: Swift.String {
              get
            }
            public var name: Swift.String {
              get
            }
            public var unitType: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductUnitType>? {
              get
            }
            public var unitAcquiredAmount: Swift.Int? {
              get
            }
            public var type: ApolloAPI.GraphQLEnum<SharedModels.NomoAPI.ProductType> {
              get
            }
            public struct Fragments : ApolloAPI.FragmentContainer {
              public let __data: ApolloAPI.DataDict
              public init(_dataDict: ApolloAPI.DataDict)
              public var subscriptionProductFragment: SharedModels.NomoAPI.SubscriptionProductFragment {
                get
              }
            }
            public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
            public var hashValue: Swift.Int {
              get
            }
          }
          public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
          public var hashValue: Swift.Int {
            get
          }
        }
        public typealias Fragments = ApolloAPI.NoFragments
        public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Fragments = ApolloAPI.NoFragments
      public typealias Schema = SharedModels.NomoAPI.SchemaMetadata
      public var hashValue: Swift.Int {
        get
      }
    }
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension SharedModels.NomoAPI {
  public struct TopupInput : ApolloAPI.InputObject {
    public var __data: ApolloAPI.InputDict {
      get
    }
    public init(_ data: ApolloAPI.InputDict)
    public init(topupId: Swift.String, quantity: Swift.Int)
    public var topupId: Swift.String {
      get
      set
    }
    public var quantity: Swift.Int {
      get
      set
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct Unit : Swift.Codable {
  public var id: Swift.String
  public var unitAmount: Swift.Int
  public var priceInCents: Swift.Float
  public let unitType: SharedModels.SubscriptionProductUnitType
  public var formattedSumUnitAmount: Swift.String {
    get
  }
  public var formattedSumPriceInCents: Swift.String {
    get
  }
  public init(id: Swift.String, unitAmount: Swift.Int, priceInCents: Swift.Float, unitType: SharedModels.SubscriptionProductUnitType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.Unit {
  public init(response: SharedModels.CatalogProduct)
}
extension Swift.Array where Element == SharedModels.Unit {
  public init(response: [SharedModels.CatalogProduct])
}
extension SharedModels.SubscriptionAddonInput {
  public init(response: SharedModels.Unit)
}
extension SharedModels.NomoAPI.Objects {
  public static let UsageByTopupUnitType: ApolloAPI.Object
}
public struct UsageByTopupUnitType : Swift.Codable {
  public let unitType: SharedModels.SubscriptionProductUnitType
  public let unitAvailableAmount: Swift.Int
  public var addedUnitAmount: Swift.Int
  public var sumUnitAmount: Swift.Int {
    get
  }
  public init(unitType: SharedModels.SubscriptionProductUnitType, unitAvailableAmount: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SharedModels.UsageByTopupUnitType {
  public init(response: SharedModels.NomoAPI.PurchaseTopupScreenQuery.Data.PurchaseTopupScreen.CurrentTopup)
}
extension SharedModels.NomoAPI {
  public enum UsageCardState : Swift.String, ApolloAPI.EnumType {
    case hide
    case standard
    case standardWithTopupLink
    case depleted
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SharedModels.NomoAPI.UsageCardState]
    public typealias RawValue = Swift.String
    public static var allCases: [SharedModels.NomoAPI.UsageCardState] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum UsageReportCardState : Swift.String, Swift.Codable {
  case HIDE
  case STANDARD
  case STANDARD_WITH_TOPUP_LINK
  case DEPLETED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.UsageReportCardState {
  public init(response: SharedModels.NomoAPI.UsageCardState?)
}
public enum UsagePaymentMethodType : Swift.String, Swift.Codable {
  case CARD
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.UsagePaymentMethodType {
  public init(response: SharedModels.NomoAPI.PaymentMethodType?)
}
public enum UsageProductType : Swift.String, Swift.Codable {
  case RECURRING
  case TOPUP
  case ADDON
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SharedModels.UsageProductType {
  public init(response: SharedModels.NomoAPI.ProductType?)
}
extension SharedModels.NomoAPI.AppStatePaymentMethodFormV2State : Swift.Equatable {}
extension SharedModels.NomoAPI.AppStatePaymentMethodFormV2State : Swift.Hashable {}
extension SharedModels.ActivateSimDeliveryCardState : Swift.Hashable {}
extension SharedModels.ActivateSimDeliveryCardState : Swift.RawRepresentable {}
extension SharedModels.ContentState : Swift.Hashable {}
extension SharedModels.ContentState : Swift.RawRepresentable {}
extension SharedModels.DataLineStatus : Swift.Hashable {}
extension SharedModels.DataLineStatus : Swift.RawRepresentable {}
extension SharedModels.NomoAPI.CancellationState : Swift.Hashable {}
extension SharedModels.PaymentMethodFormV2State : Swift.Hashable {}
extension SharedModels.PaymentMethodFormV2State : Swift.RawRepresentable {}
extension SharedModels.PortabilityCardState : Swift.Hashable {}
extension SharedModels.PortabilityCardState : Swift.RawRepresentable {}
extension SharedModels.PortabilityRequestStatus : Swift.Hashable {}
extension SharedModels.PortabilityRequestStatus : Swift.RawRepresentable {}
extension SharedModels.ProfileState : Swift.Hashable {}
extension SharedModels.ProfileState : Swift.RawRepresentable {}
extension SharedModels.StatusPayment : Swift.Hashable {}
extension SharedModels.StatusPayment : Swift.RawRepresentable {}
extension SharedModels.SubscriptionProductType : Swift.Hashable {}
extension SharedModels.SubscriptionProductType : Swift.RawRepresentable {}
extension SharedModels.SubscriptionProductUnitType : Swift.Hashable {}
extension SharedModels.SubscriptionProductUnitType : Swift.RawRepresentable {}
extension SharedModels.UsagePaymentMethodType : Swift.Hashable {}
extension SharedModels.UsagePaymentMethodType : Swift.RawRepresentable {}
extension SharedModels.UsageProductType : Swift.Hashable {}
extension SharedModels.UsageProductType : Swift.RawRepresentable {}
extension SharedModels.UsageReportCardState : Swift.Hashable {}
extension SharedModels.UsageReportCardState : Swift.RawRepresentable {}
extension SharedModels.StateCancellation : Swift.Equatable {}
extension SharedModels.StateCancellation : Swift.Hashable {}
extension SharedModels.StateCancellation : Swift.RawRepresentable {}
extension SharedModels.CancellationSummary.Status : Swift.Equatable {}
extension SharedModels.CancellationSummary.Status : Swift.Hashable {}
extension SharedModels.NomoAPI.ContentSectionState : Swift.Equatable {}
extension SharedModels.NomoAPI.ContentSectionState : Swift.Hashable {}
extension SharedModels.NomoAPI.LineStatus : Swift.Equatable {}
extension SharedModels.NomoAPI.LineStatus : Swift.Hashable {}
extension SharedModels.NomoAPI.NumberPortabilityCardState : Swift.Equatable {}
extension SharedModels.NomoAPI.NumberPortabilityCardState : Swift.Hashable {}
extension SharedModels.NomoAPI.NumberPortabilityRequestStatus : Swift.Equatable {}
extension SharedModels.NomoAPI.NumberPortabilityRequestStatus : Swift.Hashable {}
extension SharedModels.NomoAPI.PaymentMethodType : Swift.Equatable {}
extension SharedModels.NomoAPI.PaymentMethodType : Swift.Hashable {}
extension SharedModels.NomoAPI.PaymentStatus : Swift.Equatable {}
extension SharedModels.NomoAPI.PaymentStatus : Swift.Hashable {}
extension SharedModels.PortabilityStatus.Case : Swift.Equatable {}
extension SharedModels.PortabilityStatus.Case : Swift.Hashable {}
extension SharedModels.NomoAPI.ProductType : Swift.Equatable {}
extension SharedModels.NomoAPI.ProductType : Swift.Hashable {}
extension SharedModels.NomoAPI.ProductUnitType : Swift.Equatable {}
extension SharedModels.NomoAPI.ProductUnitType : Swift.Hashable {}
extension SharedModels.NomoAPI.ProfileBottomSheetItems : Swift.Equatable {}
extension SharedModels.NomoAPI.ProfileBottomSheetItems : Swift.Hashable {}
extension SharedModels.ReferralRedeemState : Swift.Equatable {}
extension SharedModels.ReferralRedeemState : Swift.Hashable {}
extension SharedModels.ReferralRedeemState : Swift.RawRepresentable {}
extension SharedModels.NomoAPI.ReferralState : Swift.Equatable {}
extension SharedModels.NomoAPI.ReferralState : Swift.Hashable {}
extension SharedModels.NomoAPI.SimDeliveryCardState : Swift.Equatable {}
extension SharedModels.NomoAPI.SimDeliveryCardState : Swift.Hashable {}
extension SharedModels.NomoAPI.UsageCardState : Swift.Equatable {}
extension SharedModels.NomoAPI.UsageCardState : Swift.Hashable {}
