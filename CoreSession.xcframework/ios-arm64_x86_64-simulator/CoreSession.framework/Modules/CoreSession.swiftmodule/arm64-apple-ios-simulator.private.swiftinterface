// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CoreSession
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import Apollo
@_exported import ApolloAPI
@_exported import CoreLogger
@_exported import CoreNetworking
@_exported import CoreStorage
import Foundation
@_exported import SharedModels
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Config {
  public enum Intercom {
    public static let chatKey: Swift.String
    public static let appId: Swift.String
  }
  public enum CustomerIO {
    public static let prodId: Swift.String
    public static let prodKey: Swift.String
    public static let devId: Swift.String
    public static let devKey: Swift.String
  }
}
public protocol WaveDelegate : AnyObject {
  var tokenManagement: any CoreNetworking.TokenManagement { get }
  func logout()
  func openHelp(with message: Swift.String?)
}
@_hasMissingDesignatedInitializers public class Wave {
  public static var shared: CoreSession.Wave
  public func setup(environment: CoreNetworking.APIEnvironment, delegate: any CoreSession.WaveDelegate)
  @objc deinit
}
public struct SessionWorld {
  public var retrieveAccount: () -> SharedModels.Account
  public var retrieveLine: () -> SharedModels.Line
  public var retrieveSignIn: () -> SharedModels.SignIn
  public var retrieveReferral: () -> SharedModels.Referral
  public var retrieveAppState: () -> SharedModels.AppState
  public var retrieveSubscription: () -> SharedModels.Subscription
  public var retrieveSubscriptionUsageReport: () -> SharedModels.SubscriptionUsageReport
  public var saveAccount: (SharedModels.Account) async -> Swift.Void
  public var saveLine: (SharedModels.Line) async -> Swift.Void
  public var saveUserSignIn: (SharedModels.SignIn) async -> Swift.Void
  public var saveReferral: (SharedModels.Referral) async -> Swift.Void
  public var saveAppState: (SharedModels.AppState) async -> Swift.Void
  public var saveSubscription: (SharedModels.Subscription) async -> Swift.Void
  public var saveSubscriptionUsageReport: (SharedModels.SubscriptionUsageReport) async -> Swift.Void
  public var clear: () -> Swift.Void
  #if compiler(>=5.3) && $AsyncAwait
  public init(retrieveAccount: @escaping () -> SharedModels.Account, retrieveLine: @escaping () -> SharedModels.Line, retrieveSignIn: @escaping () -> SharedModels.SignIn, retrieveReferral: @escaping () -> SharedModels.Referral, retrieveAppState: @escaping () -> SharedModels.AppState, retrieveSubscription: @escaping () -> SharedModels.Subscription, retrieveSubscriptionUsageReport: @escaping () -> SharedModels.SubscriptionUsageReport, saveAccount: @escaping (SharedModels.Account) async -> Swift.Void, saveLine: @escaping (SharedModels.Line) async -> Swift.Void, saveUserSignIn: @escaping (SharedModels.SignIn) async -> Swift.Void, saveReferral: @escaping (SharedModels.Referral) async -> Swift.Void, saveAppState: @escaping (SharedModels.AppState) async -> Swift.Void, saveSubscription: @escaping (SharedModels.Subscription) async -> Swift.Void, saveSubscriptionUsageReport: @escaping (SharedModels.SubscriptionUsageReport) async -> Swift.Void, clear: @escaping () -> Swift.Void)
  #endif
}
public struct Storage {
  public var userDefauts: CoreStorage.UserDefautsStorage
  public var keyChain: (CoreStorage.KeyChainService) -> CoreStorage.KeyChainStorage
  public init(userDefauts: CoreStorage.UserDefautsStorage, keyChain: @escaping (CoreStorage.KeyChainService) -> CoreStorage.KeyChainStorage)
}
@_hasMissingDesignatedInitializers public class StoreSession {
  public static var shared: CoreSession.StoreSession
  #if compiler(>=5.3) && $AsyncAwait
  public func saveAccount(_ user: SharedModels.Account) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func saveLine(_ user: SharedModels.Line) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func saveSignIn(_ user: SharedModels.SignIn) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func saveReferral(_ user: SharedModels.Referral) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func saveAppState(_ user: SharedModels.AppState) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func saveSubscription(_ user: SharedModels.Subscription) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func saveSubscriptionUsageReport(_ user: SharedModels.SubscriptionUsageReport) async
  #endif
  public func retrieveAccount() -> SharedModels.Account
  public func retrieveLine() -> SharedModels.Line
  public func retrieveSignIn() -> SharedModels.SignIn
  public func retrieveReferral() -> SharedModels.Referral
  public func retrieveAppState() -> SharedModels.AppState
  public func retrieveSubscription() -> SharedModels.Subscription
  public func retrieveSubscriptionUsageReport() -> SharedModels.SubscriptionUsageReport
  public func clear()
  @objc deinit
}
public var Current: CoreSession.World!
public struct World {
  public var session: CoreSession.SessionWorld
  public var environment: CoreNetworking.APIEnvironment
  public var storage: CoreSession.Storage
  public var networkClient: Apollo.ApolloClient
  public var logout: () -> Swift.Void
  public var help: (_ withMessage: Swift.String?) -> Swift.Void
  public init(session: CoreSession.SessionWorld, environment: CoreNetworking.APIEnvironment, storage: CoreSession.Storage, networkClient: Apollo.ApolloClient, logout: @escaping () -> Swift.Void, help: @escaping (_ withMessage: Swift.String?) -> Swift.Void)
  public func openHelp(with message: Swift.String? = nil)
}
