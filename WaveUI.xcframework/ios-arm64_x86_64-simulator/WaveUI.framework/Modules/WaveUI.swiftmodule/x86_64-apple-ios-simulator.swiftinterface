// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WaveUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CoreFormatters
import CoreNetworking
import CoreSession
import DeveloperToolsSupport
import Foundation
import LinkPresentation
@_exported import Lottie
import SharedModels
import Swift
import SwiftUI
import UIKit
import UIKit
import UIKit
@_exported import WaveFoundation
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct APNCardView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(cardNumber: Swift.String, image: SwiftUI.Image?, @SwiftUI.ViewBuilder title: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI11APNCardViewV4bodyQrvp", 0) __<Content>
}
@objc public class ActivityItemSource : ObjectiveC.NSObject, UIKit.UIActivityItemSource {
  public init(message: Swift.String, url: Foundation.URL? = nil)
  @objc public func activityViewControllerPlaceholderItem(_ activityViewController: UIKit.UIActivityViewController) -> Any
  @objc public func activityViewController(_ activityViewController: UIKit.UIActivityViewController, itemForActivityType activityType: UIKit.UIActivity.ActivityType?) -> Any?
  @objc public func activityViewController(_ activityViewController: UIKit.UIActivityViewController, subjectForActivityType activityType: UIKit.UIActivity.ActivityType?) -> Swift.String
  @objc public func activityViewControllerLinkMetadata(_ activityViewController: UIKit.UIActivityViewController) -> LinkPresentation.LPLinkMetadata?
  @objc deinit
}
public struct AlertButton : SwiftUI.View {
  public enum Style {
    case `default`
    case text
    case outline
    public static func == (a: WaveUI.AlertButton.Style, b: WaveUI.AlertButton.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(title: Swift.String, style: WaveUI.AlertButton.Style = .default, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI11AlertButtonV4bodyQrvp", 0) __
}
public struct AlertContentView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(title: Swift.String, message: Swift.String, @SwiftUI.ViewBuilder content: @escaping () -> Content, primaryButton: WaveUI.AlertButton?, secondaryButton: WaveUI.AlertButton?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI16AlertContentViewV4bodyQrvp", 0) __<Content>
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class AlertHostingController<Content> : SwiftUI.UIHostingController<Content> where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) override public init(rootView: Content)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewSafeAreaInsetsDidChange()
  @objc deinit
}
public struct AlertView : SwiftUI.View {
  public init(title: Swift.String, message: Swift.String, primaryButton: WaveUI.AlertButton?, secondaryButton: WaveUI.AlertButton?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI9AlertViewV4bodyQrvp", 0) __
}
@objc open class Animation : ObjectiveC.NSObject {
  public static let `default`: WaveUI.Animation
  open var presentationAnimation: (any WaveUI.TransitionAnimation)?
  open var dismissalAnimation: (any WaveUI.TransitionAnimation)?
  public init(presentation: (any WaveUI.TransitionAnimation)?, dismissal: (any WaveUI.TransitionAnimation)?)
  @objc deinit
}
extension WaveUI.Animation : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func interactionControllerForPresentation(using animator: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func interactionControllerForDismissal(using animator: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
}
public typealias AnyNavigationCoordinator<RouteType> = WaveUI.AnyCoordinator<RouteType, WaveUI.NavigationTransition> where RouteType : WaveUI.Route
public typealias AnyTabBarCoordinator<RouteType> = WaveUI.AnyCoordinator<RouteType, WaveUI.TabBarTransition> where RouteType : WaveUI.Route
public typealias AnyViewCoordinator<RouteType> = WaveUI.AnyCoordinator<RouteType, WaveUI.ViewTransition> where RouteType : WaveUI.Route
public class AnyCoordinator<RouteType, TransitionType> : WaveUI.Coordinator where RouteType : WaveUI.Route, TransitionType : WaveUI.TransitionProtocol {
  public init<C>(_ coordinator: C) where RouteType == C.RouteType, TransitionType == C.TransitionType, C : WaveUI.Coordinator
  public var rootViewController: TransitionType.RootViewController {
    get
  }
  public var viewController: UIKit.UIViewController! {
    get
  }
  public func prepareTransition(for route: RouteType) -> TransitionType
  public func presented(from presentable: (any WaveUI.Presentable)?)
  public func registerParent(_ presentable: any WaveUI.Presentable & Swift.AnyObject)
  public func setRoot(for window: UIKit.UIWindow)
  public func addChild(_ presentable: any WaveUI.Presentable)
  public func removeChild(_ presentable: any WaveUI.Presentable)
  public func removeChildrenIfNeeded()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnyTransitionPerformer<TransitionType> : WaveUI.TransitionPerformer where TransitionType : WaveUI.TransitionProtocol {
  public var viewController: UIKit.UIViewController! {
    get
  }
  public var rootViewController: TransitionType.RootViewController {
    get
  }
  public func presented(from presentable: (any WaveUI.Presentable)?)
  public func performTransition(_ transition: TransitionType, with options: WaveUI.TransitionOptions, completion: WaveUI.PresentationHandler? = nil)
  @objc deinit
}
public enum AsyncResult<T> {
  case none
  case empty
  case inProgress
  case success(T)
  case failure(CoreNetworking.NetworkError)
}
public struct AsyncResultView<T, Footer, Content> : SwiftUI.View where Footer : SwiftUI.View, Content : SwiftUI.View {
  public init(result: WaveUI.AsyncResult<T>, @SwiftUI.ViewBuilder content: @escaping (_ item: T) -> Content, @SwiftUI.ViewBuilder footer: @escaping (_ item: T) -> Footer, reloadAction: (() -> Swift.Void)? = nil, openHelp: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI15AsyncResultViewV4bodyQrvp", 0) __<T, Footer, Content>
}
@_Concurrency.MainActor(unsafe) public struct AsyncView<T, Footer, Content> : SwiftUI.View where Footer : SwiftUI.View, Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: WaveUI.AsyncViewModel<T>, content: @escaping (_ item: T) -> Content, footer: @escaping (_ item: T) -> Footer)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI9AsyncViewV4bodyQrvp", 0) __<T, Footer, Content>
}
@_Concurrency.MainActor open class AsyncViewModel<T> : Foundation.ObservableObject {
  #if compiler(>=5.3) && $AsyncAwait
  public typealias AsyncOperation = () async throws -> T
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public init(asyncOperation: WaveUI.AsyncViewModel<T>.AsyncOperation? = nil)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func fetch() async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func fetchIfNeeded() async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor open func asyncOperation() async throws -> T
  #endif
  @_Concurrency.MainActor open func openHelp()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class BarCodeField : WaveUI.BaseOTPTextField<WaveUI.BarCodeTextFieldLabel> {
  @_Concurrency.MainActor(unsafe) override final public var numberOfDigits: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override final public var spacing: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var boxBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var activeBoxBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var filledBoxBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var borderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var activeBorderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var filledBorderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var boxPlaceholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var boxPlaceholderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override final public func redraw()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class BarCodeTextFieldLabel : UIKit.UIView, WaveUI.BaseOTP {
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var font: UIKit.UIFont! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var active: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var textColor: UIKit.UIColor! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func updateState()
  @objc deinit
}
public struct BaseColor {
  public let base01: SwiftUI.Color
  public let base02: SwiftUI.Color
  public let base03: SwiftUI.Color
  public let base04: SwiftUI.Color
  public let base05: SwiftUI.Color
  public init(base01: SwiftUI.Color = .init(red: 153/255, green: 141/255, blue: 125/255), base02: SwiftUI.Color = .init(red: 199/255, green: 188/255, blue: 173/255), base03: SwiftUI.Color = .init(red: 217/255, green: 208/255, blue: 195/255), base04: SwiftUI.Color = .init(red: 232/255, green: 224/255, blue: 213/255), base05: SwiftUI.Color = .init(red: 246/255, green: 243/255, blue: 239/255))
}
extension WaveUI.BaseCoordinator {
  public typealias RootViewController = TransitionType.RootViewController
}
open class BaseCoordinator<RouteType, TransitionType> : WaveUI.Coordinator where RouteType : WaveUI.Route, TransitionType : WaveUI.TransitionProtocol {
  public var children: [any WaveUI.Presentable] {
    get
  }
  public var rootViewController: WaveUI.BaseCoordinator<RouteType, TransitionType>.RootViewController {
    get
  }
  open var viewController: UIKit.UIViewController! {
    get
  }
  public init(rootViewController: WaveUI.BaseCoordinator<RouteType, TransitionType>.RootViewController, initialRoute: RouteType?)
  public init(rootViewController: WaveUI.BaseCoordinator<RouteType, TransitionType>.RootViewController, initialTransition: TransitionType?)
  open func presented(from presentable: (any WaveUI.Presentable)?)
  public func removeChildrenIfNeeded()
  public func addChild(_ presentable: any WaveUI.Presentable)
  public func removeChild(_ presentable: any WaveUI.Presentable)
  open func prepareTransition(for route: RouteType) -> TransitionType
  public func registerParent(_ presentable: any WaveUI.Presentable & Swift.AnyObject)
  @available(iOS, unavailable, message: "Please specify the rootViewController in the initializer of your coordinator instead.")
  open func generateRootViewController() -> WaveUI.BaseCoordinator<RouteType, TransitionType>.RootViewController
  @objc deinit
}
extension WaveUI.BaseCoordinator {
  public func registerInteractiveTransition<GestureRecognizer>(for route: RouteType, triggeredBy recognizer: GestureRecognizer, handler: @escaping (_ handlerRecognizer: GestureRecognizer, _ transition: () -> (any WaveUI.TransitionAnimation)?) -> Swift.Void, completion: WaveUI.PresentationHandler? = nil) where GestureRecognizer : UIKit.UIGestureRecognizer
  public func registerInteractiveTransition<GestureRecognizer>(for route: RouteType, triggeredBy recognizer: GestureRecognizer, progress: @escaping (GestureRecognizer) -> CoreFoundation.CGFloat, shouldFinish: @escaping (GestureRecognizer) -> Swift.Bool, completion: WaveUI.PresentationHandler? = nil) where GestureRecognizer : UIKit.UIGestureRecognizer
  public func unregisterInteractiveTransitions(triggeredBy recognizer: UIKit.UIGestureRecognizer)
}
public protocol BaseOTP : UIKit.UIView {
  var active: Swift.Bool { get set }
  var text: Swift.String? { get set }
  var textColor: UIKit.UIColor! { get set }
  var font: UIKit.UIFont! { get set }
  func updateState()
}
public protocol BaseOTPTextFieldDelegate : AnyObject {
  func didPressDeleteBackward()
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseOTPTextField<Label> : UIKit.UITextField, UIKit.UITextFieldDelegate where Label : WaveUI.BaseOTP {
  @_Concurrency.MainActor(unsafe) weak public var baseOTPDelegate: (any WaveUI.BaseOTPTextFieldDelegate)?
  @_Concurrency.MainActor(unsafe) open var numberOfDigits: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var spacing: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var labels: [Label] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setNeedsLayout()
  @_Concurrency.MainActor(unsafe) open func redraw()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func caretRect(for position: UIKit.UITextPosition) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc deinit
}
public struct BaseScrollView<Content> where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(_ axis: SwiftUI.Axis.Set, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI14BaseScrollViewV4bodyQrvp", 0) __<Content>
}
extension WaveUI.BaseTextField {
  @_Concurrency.MainActor(unsafe) public func showError()
  @_Concurrency.MainActor(unsafe) public func hideError()
}
@objc @_Concurrency.MainActor(unsafe) open class BaseTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public init(placeholder: Swift.String)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func setup()
  @_Concurrency.MainActor(unsafe) open func setupPlaceholder()
  @objc deinit
}
public struct BaseView<Content> where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(alignment: SwiftUI.HorizontalAlignment = .leading, spacing: CoreFoundation.CGFloat = 0.0, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI8BaseViewV4bodyQrvp", 0) __<Content>
}
public typealias BasicNavigationCoordinator<R> = WaveUI.BasicCoordinator<R, WaveUI.NavigationTransition> where R : WaveUI.Route
public typealias BasicViewCoordinator<R> = WaveUI.BasicCoordinator<R, WaveUI.ViewTransition> where R : WaveUI.Route
public typealias BasicTabBarCoordinator<R> = WaveUI.BasicCoordinator<R, WaveUI.TabBarTransition> where R : WaveUI.Route
open class BasicCoordinator<RouteType, TransitionType> : WaveUI.BaseCoordinator<RouteType, TransitionType> where RouteType : WaveUI.Route, TransitionType : WaveUI.TransitionProtocol {
  public enum InitialLoadingType {
    case immediately
    case presented
    public static func == (a: WaveUI.BasicCoordinator<RouteType, TransitionType>.InitialLoadingType, b: WaveUI.BasicCoordinator<RouteType, TransitionType>.InitialLoadingType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(rootViewController: WaveUI.BasicCoordinator<RouteType, TransitionType>.RootViewController, initialRoute: RouteType? = nil, initialLoadingType: WaveUI.BasicCoordinator<RouteType, TransitionType>.InitialLoadingType = .presented, prepareTransition: ((RouteType) -> TransitionType)?)
  override open func presented(from presentable: (any WaveUI.Presentable)?)
  override open func prepareTransition(for route: RouteType) -> TransitionType
  @objc deinit
}
public struct BlueColor {
  public let dark: SwiftUI.Color
  public let bright: SwiftUI.Color
  public let medium: SwiftUI.Color
  public let light: SwiftUI.Color
  public init(dark: SwiftUI.Color = .init(red: 32/255, green: 87/255, blue: 158/255), bright: SwiftUI.Color = .init(red: 73/255, green: 135/255, blue: 217/255), medium: SwiftUI.Color = .init(red: 127/255, green: 169/255, blue: 225/255), light: SwiftUI.Color = .init(red: 223/255, green: 233/255, blue: 247/255))
}
@objc @_Concurrency.MainActor(unsafe) public class BottomSheetTransitioningController : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) public init(navigationController: WaveUI.NomoNavigationController)
  @_Concurrency.MainActor(unsafe) @objc public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @objc deinit
}
public struct BottomSheetView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public enum ButtonStyle {
    case fill, outline, text
    public static func == (a: WaveUI.BottomSheetView<Content>.ButtonStyle, b: WaveUI.BottomSheetView<Content>.ButtonStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(title: Swift.String, @SwiftUI.ViewBuilder content: @escaping () -> Content, firstButtonStyle: WaveUI.BottomSheetView<Content>.ButtonStyle, firstButtonTitle: Swift.String, firstButtonAction: @escaping () -> Swift.Void, secondButtonStyle: WaveUI.BottomSheetView<Content>.ButtonStyle? = nil, secondButtonTitle: Swift.String? = nil, secondButtonAction: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI15BottomSheetViewV4bodyQrvp", 0) __<Content>
}
public struct BrandColor {
  public let brand01: SwiftUI.Color
  public let brand02: SwiftUI.Color
  public let brand03: SwiftUI.Color
  public let brand04: SwiftUI.Color
  public let brand05: SwiftUI.Color
  public init(brand01: SwiftUI.Color = .init(red: 191/255, green: 57/255, blue: 106/255), brand02: SwiftUI.Color = .init(red: 217/255, green: 87/255, blue: 134/255), brand03: SwiftUI.Color = .init(red: 235/255, green: 129/255, blue: 167/255), brand04: SwiftUI.Color = .init(red: 255/255, green: 192/255, blue: 215/255), brand05: SwiftUI.Color = .init(red: 255/255, green: 228/255, blue: 239/255))
}
public struct CardView<Content> where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(background: SwiftUI.Color = NomoColor.Brand.Neutral.white, alignment: SwiftUI.HorizontalAlignment = .leading, spacing: CoreFoundation.CGFloat = 0.0, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  public init(background: SwiftUI.Color = NomoColor.Brand.Neutral.white, alignment: SwiftUI.HorizontalAlignment = .leading, spacing: CoreFoundation.CGFloat = 0.0, edges: SwiftUI.Edge.Set, lenght: CoreFoundation.CGFloat, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI8CardViewV4bodyQrvp", 0) __<Content>
}
public struct CarouselView<Data, Content> where Data : Swift.Hashable, Content : SwiftUI.View {
  public init(_ data: SwiftUI.Binding<[Data]>, content: @escaping (Data) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI12CarouselViewV4bodyQrvp", 0) __<Data, Content>
}
public struct CheckFAQView : SwiftUI.View {
  public init(title: Swift.String, subtitle: Swift.String, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI12CheckFAQViewV4bodyQrvp", 0) __
}
public struct ColorSet {
  public let main: WaveUI.BrandColor
  public let base: WaveUI.BaseColor
  public let text: WaveUI.TextColor
  public let ochore: WaveUI.OchoreColor
  public let teal: WaveUI.TealColor
  public let blue: WaveUI.BlueColor
  public let white: SwiftUI.Color
  public init(main: WaveUI.BrandColor = BrandColor(), base: WaveUI.BaseColor = BaseColor())
}
public protocol Container {
  var view: UIKit.UIView! { get }
  var viewController: UIKit.UIViewController! { get }
}
extension UIKit.UIViewController : WaveUI.Container {
  @_Concurrency.MainActor(unsafe) public var viewController: UIKit.UIViewController! {
    get
  }
}
extension UIKit.UIView : WaveUI.Container {
  @_Concurrency.MainActor(unsafe) public var viewController: UIKit.UIViewController! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView! {
    get
  }
}
public typealias PresentationHandler = () -> Swift.Void
public typealias ContextPresentationHandler = (any WaveUI.TransitionContext) -> Swift.Void
public protocol Coordinator : WaveUI.Router, WaveUI.TransitionPerformer {
  func prepareTransition(for route: Self.RouteType) -> Self.TransitionType
  func addChild(_ presentable: any WaveUI.Presentable)
  func removeChild(_ presentable: any WaveUI.Presentable)
  func removeChildrenIfNeeded()
}
extension WaveUI.Coordinator {
  public typealias RootViewController = Self.TransitionType.RootViewController
}
extension WaveUI.Coordinator {
  public var viewController: UIKit.UIViewController! {
    get
  }
}
extension WaveUI.Coordinator where Self : AnyObject {
  public var weakRouter: WaveUI.WeakRouter<Self.RouteType> {
    get
  }
  public var unownedRouter: WaveUI.UnownedRouter<Self.RouteType> {
    get
  }
}
extension WaveUI.Coordinator where Self : AnyObject {
  public var anyCoordinator: WaveUI.AnyCoordinator<Self.RouteType, Self.TransitionType> {
    get
  }
  public func presented(from presentable: (any WaveUI.Presentable)?)
  public func childTransitionCompleted()
  public func contextTrigger(_ route: Self.RouteType, with options: WaveUI.TransitionOptions, completion: WaveUI.ContextPresentationHandler?)
  public func chain(routes: [Self.RouteType]) -> Self.TransitionType
  public func performTransition(_ transition: Self.TransitionType, with options: WaveUI.TransitionOptions, completion: WaveUI.PresentationHandler? = nil)
}
extension SwiftUI.View {
  public func cornerRadius(_ radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner) -> some SwiftUI.View
  
}
public struct CreditCardImage : SwiftUI.View {
  public init(url: Foundation.URL?)
  public init(string: Swift.String?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI15CreditCardImageV4bodyQrvp", 0) __
}

public struct CreditCardNumberTextField : SwiftUI.View {
  public init(text: SwiftUI.Binding<Swift.String>, hasError: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String, shouldBecomeFirstResponder: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI25CreditCardNumberTextFieldV4bodyQrvp", 0) __
}
public protocol TransitionContext {
  var presentables: [any WaveUI.Presentable] { get }
  var animation: (any WaveUI.TransitionAnimation)? { get }
}
extension WaveUI.Coordinator where Self : AnyObject {
  public func deepLink<RootViewController, S>(_ route: Self.RouteType, _ remainingRoutes: S) -> WaveUI.Transition<RootViewController> where S : Swift.Sequence, Self.TransitionType == WaveUI.Transition<RootViewController>, S.Element == any WaveUI.Route
  public func deepLink<RootViewController>(_ route: Self.RouteType, _ remainingRoutes: any WaveUI.Route...) -> WaveUI.Transition<RootViewController> where Self.TransitionType == WaveUI.Transition<RootViewController>
}
public enum Dimen {
  public enum Padding {
    public static let tiny: CoreFoundation.CGFloat
    public static let smallest: CoreFoundation.CGFloat
    public static let smaller: CoreFoundation.CGFloat
    public static let small: CoreFoundation.CGFloat
    public static let `default`: CoreFoundation.CGFloat
    public static let largest: CoreFoundation.CGFloat
    public static let largestX2: CoreFoundation.CGFloat
    public static let largestX3: CoreFoundation.CGFloat
    public static let largestX4: CoreFoundation.CGFloat
  }
  public enum CornerRadius {
    public static let smallest: CoreFoundation.CGFloat
    public static let `default`: CoreFoundation.CGFloat
    public static let larger: CoreFoundation.CGFloat
    public static let largest: CoreFoundation.CGFloat
  }
  public enum Image {
    public static let small: CoreFoundation.CGFloat
    public static let `default`: CoreFoundation.CGFloat
    public static let big: CoreFoundation.CGFloat
    public static let bigger: CoreFoundation.CGFloat
    public static let biggest: CoreFoundation.CGFloat
  }
  public enum Button {
    public static let small: CoreFoundation.CGFloat
    public static let `default`: CoreFoundation.CGFloat
  }
}
extension CoreFoundation.CGFloat {
  public var negative: CoreFoundation.CGFloat {
    get
  }
}
public struct DualButtonStepView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public enum ButtonStyle {
    case fill, outline, text
    public static func == (a: WaveUI.DualButtonStepView<Content>.ButtonStyle, b: WaveUI.DualButtonStepView<Content>.ButtonStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(image: SwiftUI.Image, title: Swift.String, @SwiftUI.ViewBuilder content: @escaping () -> Content, firstButtonStyle: WaveUI.DualButtonStepView<Content>.ButtonStyle, firstButtonTitle: Swift.String, firstButtonAction: @escaping () -> Swift.Void, secondButtonStyle: WaveUI.DualButtonStepView<Content>.ButtonStyle, secondButtonTitle: Swift.String, secondButtonAction: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI18DualButtonStepViewV4bodyQrvp", 0) __<Content>
}
public struct EmailTextField : SwiftUI.View {
  public init(text: SwiftUI.Binding<Swift.String>, placeholder: Swift.String, shouldBecomeFirstResponder: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI14EmailTextFieldV4bodyQrvp", 0) __
}
public struct ErrorStepView : SwiftUI.View {
  public init(action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI13ErrorStepViewV4bodyQrvp", 0) __
}
public struct ExpirationDateTextField : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($hasError) public var hasError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $hasError: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public let placeholder: Swift.String
  public init(text: SwiftUI.Binding<Swift.String>, hasError: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI23ExpirationDateTextFieldV4bodyQrvp", 0) __
}
public struct FilledButton : SwiftUI.View {
  public init(text: Swift.String, isLoading: SwiftUI.Binding<Swift.Bool> = .constant(false), height: CoreFoundation.CGFloat = Dimen.Button.default, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI12FilledButtonV4bodyQrvp", 0) __
}
extension SwiftUI.View {
  public func tag(foregroundColor: SwiftUI.Color, backgroundColor: SwiftUI.Color) -> some SwiftUI.View
  
  public func flexPlanTag() -> some SwiftUI.View
  
}
extension UIKit.UIFont {
  public static func register()
}
extension SwiftUI.View {
  public func onTapImpactFeedbackGesture(count: Swift.Int = 1, perform action: @escaping () -> Swift.Void) -> some SwiftUI.View
  
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class HostingController<Content> : SwiftUI.UIHostingController<Content> where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) override public init(rootView: Content)
  @_Concurrency.MainActor(unsafe) public init(rootView: Content, backgroundColor: SwiftUI.Color = NomoColor.Brand.Sand.background, shouldHideBackButton: Swift.Bool = false, isBackButtonPressed: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewSafeAreaInsetsDidChange()
  @objc deinit
}
public struct InProgressView : SwiftUI.View {
  public init(backgroundColor: SwiftUI.Color)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI14InProgressViewV4bodyQrvp", 0) __
}
@objc @_Concurrency.MainActor(unsafe) open class InteractiveTransitionAnimation : ObjectiveC.NSObject, WaveUI.TransitionAnimation {
  @_Concurrency.MainActor(unsafe) open var interactionController: (any WaveUI.PercentDrivenInteractionController)? {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(duration: Foundation.TimeInterval, transition: @escaping (any UIKit.UIViewControllerContextTransitioning) -> Swift.Void, generateInteractionController: @escaping () -> (any WaveUI.PercentDrivenInteractionController)?)
  @_Concurrency.MainActor(unsafe) convenience public init(duration: Foundation.TimeInterval, transition: @escaping (any UIKit.UIViewControllerContextTransitioning) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) convenience public init(transitionAnimation: WaveUI.StaticTransitionAnimation, generateInteractionController: @escaping () -> (any WaveUI.PercentDrivenInteractionController)?)
  @_Concurrency.MainActor(unsafe) convenience public init(transitionAnimation: WaveUI.StaticTransitionAnimation)
  @_Concurrency.MainActor(unsafe) @objc open func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc open func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) open func generateInteractionController() -> (any WaveUI.PercentDrivenInteractionController)?
  @_Concurrency.MainActor(unsafe) open func start()
  @_Concurrency.MainActor(unsafe) open func cleanup()
  @objc deinit
}
@objc @available(iOS 10.0, tvOS 10.0, *)
@_Concurrency.MainActor(unsafe) open class InterruptibleTransitionAnimation : WaveUI.InteractiveTransitionAnimation {
  @_Concurrency.MainActor(unsafe) public init(duration: Foundation.TimeInterval, generateAnimator: @escaping (any UIKit.UIViewControllerContextTransitioning) -> any UIKit.UIViewImplicitlyAnimating, generateInteractionController: @escaping () -> (any WaveUI.PercentDrivenInteractionController)?)
  @_Concurrency.MainActor(unsafe) convenience public init(duration: Foundation.TimeInterval, generateAnimator: @escaping (any UIKit.UIViewControllerContextTransitioning) -> any UIKit.UIViewImplicitlyAnimating)
  @_Concurrency.MainActor(unsafe) open func generateInterruptibleAnimator(using transitionContext: any UIKit.UIViewControllerContextTransitioning) -> any UIKit.UIViewImplicitlyAnimating
  @_Concurrency.MainActor(unsafe) @objc override open func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) @objc open func interruptibleAnimator(using transitionContext: any UIKit.UIViewControllerContextTransitioning) -> any UIKit.UIViewImplicitlyAnimating
  @objc deinit
}
extension SwiftUI.View {
  public func keyboardAdaptive() -> some SwiftUI.View
  
}
public protocol LottieAnimationModifier {
  func modify(animationView: Lottie.LottieAnimationView)
}
public struct StrokeColorModifier : WaveUI.LottieAnimationModifier {
  public init(color: SwiftUI.Color)
  public func modify(animationView: Lottie.LottieAnimationView)
}
public struct LottieView : SwiftUI.UIViewRepresentable {
  public init(animation: Lottie.LottieAnimation, modifier: (any WaveUI.LottieAnimationModifier)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<WaveUI.LottieView>) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIView, context: SwiftUI.UIViewRepresentableContext<WaveUI.LottieView>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIView
}
public struct NameHolderTextField : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($hasError) public var hasError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $hasError: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public init(text: SwiftUI.Binding<Swift.String>, hasError: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String, errorMessage: Swift.String? = nil, shouldBecomeFirstResponder: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI19NameHolderTextFieldV4bodyQrvp", 0) __
}
@objc @_inheritsConvenienceInitializers open class NavigationAnimationDelegate : ObjectiveC.NSObject {
  open var velocityThreshold: CoreFoundation.CGFloat {
    get
  }
  open var transitionProgressThreshold: CoreFoundation.CGFloat {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension WaveUI.NavigationAnimationDelegate : UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, interactionControllerFor animationController: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, willShow viewController: UIKit.UIViewController, animated: Swift.Bool)
}
extension WaveUI.NavigationAnimationDelegate : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc dynamic open func handleInteractivePopGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  public func setupPopGestureRecognizer(for navigationController: UIKit.UINavigationController)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc deinit
}
open class NavigationCoordinator<RouteType> : WaveUI.BaseCoordinator<RouteType, WaveUI.NavigationTransition> where RouteType : WaveUI.Route {
  final public let animationDelegate: WaveUI.NavigationAnimationDelegate
  public var delegate: (any UIKit.UINavigationControllerDelegate)? {
    get
    set
  }
  override public init(rootViewController: WaveUI.NavigationCoordinator<RouteType>.RootViewController = .init(), initialRoute: RouteType? = nil)
  public init(rootViewController: WaveUI.NavigationCoordinator<RouteType>.RootViewController = .init(), root: any WaveUI.Presentable)
  @objc deinit
}
public typealias NavigationTransition = WaveUI.Transition<UIKit.UINavigationController>
extension WaveUI.Transition where RootViewController : UIKit.UINavigationController {
  public static func push(_ presentable: any WaveUI.Presentable, animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func pop(animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func pop(to presentable: any WaveUI.Presentable, animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func popToRoot(animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func set(_ presentables: [any WaveUI.Presentable], animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
}
public struct NomoAsyncImage : SwiftUI.View {
  public init(url: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI14NomoAsyncImageV4bodyQrvp", 0) __
}
public enum NomoColor {
  public enum Theme {
    public static let primary: SwiftUI.Color
  }
  public enum Brand {
    public enum Main {
      public static let primary: SwiftUI.Color
      public static let bright: SwiftUI.Color
      public static let medium: SwiftUI.Color
      public static let light: SwiftUI.Color
      public static let nomo: SwiftUI.Color
    }
    public enum Sand {
      public static let dark: SwiftUI.Color
      public static let bright: SwiftUI.Color
      public static let medium: SwiftUI.Color
      public static let light: SwiftUI.Color
      public static let background: SwiftUI.Color
    }
    public enum Neutral {
      public static let dark: SwiftUI.Color
      public static let bright: SwiftUI.Color
      public static let medium: SwiftUI.Color
      public static let light: SwiftUI.Color
      public static let background: SwiftUI.Color
      public static let white: SwiftUI.Color
    }
  }
  public enum System {
    public enum Ochore {
      public static let dark: SwiftUI.Color
      public static let bright: SwiftUI.Color
      public static let medium: SwiftUI.Color
      public static let light: SwiftUI.Color
    }
    public enum Teal {
      public static let dark: SwiftUI.Color
      public static let bright: SwiftUI.Color
      public static let medium: SwiftUI.Color
      public static let light: SwiftUI.Color
    }
    public enum Blue {
      public static let dark: SwiftUI.Color
      public static let bright: SwiftUI.Color
      public static let medium: SwiftUI.Color
      public static let light: SwiftUI.Color
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class NomoNavigationController : WaveUI.NavigationController {
  @_Concurrency.MainActor(unsafe) final public var isBottomSheet: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var closeAction: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public init(rootViewController: UIKit.UIViewController, barTintColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) final public func addCloseButton(to controller: UIKit.UIViewController)
  @objc deinit
}
public struct NomoText : SwiftUI.View {
  public init(_ text: Swift.String, isInline: Swift.Bool = true, alignment: SwiftUI.Alignment = .leading)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI8NomoTextV4bodyQrvp", 0) __
}
public struct NotificationName {
  public static var shared: WaveUI.NotificationName
  public let updateCreditCard: Foundation.NSNotification.Name
  public let updateHome: Foundation.NSNotification.Name
  public let referralHome: Foundation.NSNotification.Name
  public let dismissSwiftUI: Foundation.NSNotification.Name
  public let paymentFailure: Foundation.NSNotification.Name
  public let navigationSwiftUI: Foundation.NSNotification.Name
}
public struct OchoreColor {
  public let dark: SwiftUI.Color
  public let bright: SwiftUI.Color
  public let medium: SwiftUI.Color
  public let light: SwiftUI.Color
  public init(dark: SwiftUI.Color = .init(red: 165/255, green: 91/255, blue: 21/255), bright: SwiftUI.Color = .init(red: 214/255, green: 118/255, blue: 29/255), medium: SwiftUI.Color = .init(red: 255/255, green: 179/255, blue: 108/255), light: SwiftUI.Color = .init(red: 253/255, green: 226/255, blue: 201/255))
}
public struct OutlineButton : SwiftUI.View {
  public init(text: Swift.String, height: CoreFoundation.CGFloat = Dimen.Button.default, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI13OutlineButtonV4bodyQrvp", 0) __
}
open class PageCoordinator<RouteType> : WaveUI.BaseCoordinator<RouteType, WaveUI.PageTransition> where RouteType : WaveUI.Route {
  final public let dataSource: any UIKit.UIPageViewControllerDataSource
  public init(rootViewController: WaveUI.PageCoordinator<RouteType>.RootViewController = .init(), pages: [any WaveUI.Presentable], loop: Swift.Bool = false, set: (any WaveUI.Presentable)? = nil, direction: UIKit.UIPageViewController.NavigationDirection = .forward)
  public init(rootViewController: WaveUI.PageCoordinator<RouteType>.RootViewController = .init(), dataSource: any UIKit.UIPageViewControllerDataSource, set: any WaveUI.Presentable, direction: UIKit.UIPageViewController.NavigationDirection)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class PageCoordinatorDataSource : ObjectiveC.NSObject, UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) open var pages: [UIKit.UIViewController]
  @_Concurrency.MainActor(unsafe) open var loop: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(pages: [UIKit.UIViewController], loop: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func presentationIndex(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc open func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @objc deinit
}
public struct PageTitleView : WaveUI.HeaderView {
  public init(title: Swift.String, subtitle: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI13PageTitleViewV4bodyQrvp", 0) __
}
public typealias PageTransition = WaveUI.Transition<UIKit.UIPageViewController>
extension WaveUI.Transition where RootViewController : UIKit.UIPageViewController {
  public static func set(_ first: any WaveUI.Presentable, _ second: (any WaveUI.Presentable)? = nil, direction: UIKit.UIPageViewController.NavigationDirection) -> WaveUI.Transition<RootViewController>
}
public struct PasswordTextField : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($hasError) public var hasError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $hasError: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public init(text: SwiftUI.Binding<Swift.String>, hasError: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String, shouldBecomeFirstResponder: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI17PasswordTextFieldV4bodyQrvp", 0) __
}
public struct PhoneNumberTextField : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($hasError) public var hasError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $hasError: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public init(text: SwiftUI.Binding<Swift.String>, hasError: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String, shouldBecomeFirstResponder: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI20PhoneNumberTextFieldV4bodyQrvp", 0) __
}

public struct PlanDescriptionItems : SwiftUI.View {
  public init(description: SharedModels.CatalogDescription)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI20PlanDescriptionItemsV4bodyQrvp", 0) __
}

public struct PresentNavigationLink : SwiftUI.View {
  public init(actionTitle: Swift.String, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI21PresentNavigationLinkV4bodyQrvp", 0) __
}
public protocol Presentable {
  var viewController: UIKit.UIViewController! { get }
  func router<R>(for route: R) -> WaveUI.StrongRouter<R>? where R : WaveUI.Route
  func presented(from presentable: (any WaveUI.Presentable)?)
  func registerParent(_ presentable: any WaveUI.Presentable & Swift.AnyObject)
  func childTransitionCompleted()
  func setRoot(for window: UIKit.UIWindow)
}
extension WaveUI.Presentable {
  public func registerParent(_ presentable: any WaveUI.Presentable & Swift.AnyObject)
  public func childTransitionCompleted()
  public func setRoot(for window: UIKit.UIWindow)
  public func router<R>(for route: R) -> WaveUI.StrongRouter<R>? where R : WaveUI.Route
  public func presented(from presentable: (any WaveUI.Presentable)?)
}
extension UIKit.UIViewController : WaveUI.Presentable {
}
extension UIKit.UIWindow : WaveUI.Presentable {
}
public struct LinearProgressView : SwiftUI.View {
  public init(value: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI18LinearProgressViewV4bodyQrvp", 0) __
}
public struct RecentlyCreatedConfigErrorView : SwiftUI.View {
  public init(action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI30RecentlyCreatedConfigErrorViewV4bodyQrvp", 0) __
}
open class RedirectionRouter<ParentRoute, RouteType> : WaveUI.Router where ParentRoute : WaveUI.Route, RouteType : WaveUI.Route {
  final public let parent: WaveUI.UnownedRouter<ParentRoute>
  public var viewController: UIKit.UIViewController! {
    get
  }
  public init(viewController: UIKit.UIViewController, parent: WaveUI.UnownedRouter<ParentRoute>, map: ((RouteType) -> ParentRoute)?)
  open func contextTrigger(_ route: RouteType, with options: WaveUI.TransitionOptions, completion: WaveUI.ContextPresentationHandler?)
  open func mapToParentRoute(_ route: RouteType) -> ParentRoute
  @objc deinit
}
public protocol Route {
}
public protocol Router : WaveUI.Presentable {
  associatedtype RouteType : WaveUI.Route
  func contextTrigger(_ route: Self.RouteType, with options: WaveUI.TransitionOptions, completion: WaveUI.ContextPresentationHandler?)
}
extension WaveUI.Router {
  public func trigger(_ route: Self.RouteType, with options: WaveUI.TransitionOptions)
  public func trigger(_ route: Self.RouteType, completion: WaveUI.PresentationHandler? = nil)
  public func trigger(_ route: Self.RouteType, with options: WaveUI.TransitionOptions, completion: WaveUI.PresentationHandler?)
}
extension WaveUI.Router {
  public var strongRouter: WaveUI.StrongRouter<Self.RouteType> {
    get
  }
  public func router<R>(for route: R) -> WaveUI.StrongRouter<R>? where R : WaveUI.Route
}
@available(iOS 13.0, tvOS 13.0, *)
extension WaveUI.Router {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func trigger(_ route: Self.RouteType) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func trigger(_ route: Self.RouteType, with options: WaveUI.TransitionOptions) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func contextTrigger(_ route: Self.RouteType, with options: WaveUI.TransitionOptions) async -> any WaveUI.TransitionContext
  #endif
}
public protocol HeaderView : SwiftUI.View {
}
public protocol HeaderCustomView : SwiftUI.View {
  associatedtype Header : SwiftUI.View
  @SwiftUI.ViewBuilder var header: Self.Header { get }
}
public protocol MainCustomView : SwiftUI.View {
  associatedtype Main : SwiftUI.View
  @SwiftUI.ViewBuilder var main: Self.Main { get }
}
public protocol FooterCustomView : SwiftUI.View {
  associatedtype Footer : SwiftUI.View
  @SwiftUI.ViewBuilder var footer: Self.Footer { get }
}
public protocol ScreenView : WaveUI.FooterCustomView, WaveUI.HeaderCustomView, WaveUI.MainCustomView {
  var footerBackgroundColor: SwiftUI.Color { get }
  var footerMaxHeight: CoreFoundation.CGFloat { get }
  var cornerRadius: CoreFoundation.CGFloat { get }
}
extension WaveUI.ScreenView {
  public var footerBackgroundColor: SwiftUI.Color {
    get
  }
  public var footerMaxHeight: CoreFoundation.CGFloat {
    get
  }
  public var cornerRadius: CoreFoundation.CGFloat {
    get
  }
  public var body: some SwiftUI.View {
    get
  }
}
public struct SecurityCodeTextField : SwiftUI.View {
  public init(text: SwiftUI.Binding<Swift.String>, securityCodeAction: @escaping () -> Swift.Void, placeholder: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI21SecurityCodeTextFieldV4bodyQrvp", 0) __
}
public struct SingleButtonStepView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public enum ButtonStyle {
    case fill, outline, text
    public static func == (a: WaveUI.SingleButtonStepView<Content>.ButtonStyle, b: WaveUI.SingleButtonStepView<Content>.ButtonStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(image: SwiftUI.Image, title: Swift.String, @SwiftUI.ViewBuilder content: @escaping () -> Content, buttonStyle: WaveUI.SingleButtonStepView<Content>.ButtonStyle, buttonTitle: Swift.String, buttonAction: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI20SingleButtonStepViewV4bodyQrvp", 0) __<Content>
}
open class SplitCoordinator<RouteType> : WaveUI.BaseCoordinator<RouteType, WaveUI.SplitTransition> where RouteType : WaveUI.Route {
  override public init(rootViewController: WaveUI.SplitCoordinator<RouteType>.RootViewController = .init(), initialRoute: RouteType?)
  public init(rootViewController: WaveUI.SplitCoordinator<RouteType>.RootViewController = .init(), master: any WaveUI.Presentable, detail: (any WaveUI.Presentable)?)
  @objc deinit
}
public typealias SplitTransition = WaveUI.Transition<UIKit.UISplitViewController>
extension WaveUI.Transition where RootViewController : UIKit.UISplitViewController {
  public static func set(_ presentables: [any WaveUI.Presentable]) -> WaveUI.Transition<RootViewController>
}
@objc @_Concurrency.MainActor(unsafe) open class StaticTransitionAnimation : ObjectiveC.NSObject, WaveUI.TransitionAnimation {
  @_Concurrency.MainActor(unsafe) open var interactionController: (any WaveUI.PercentDrivenInteractionController)? {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(duration: Foundation.TimeInterval, performAnimation: @escaping (_ context: any UIKit.UIViewControllerContextTransitioning) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc open func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc open func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) open func start()
  @_Concurrency.MainActor(unsafe) open func cleanup()
  @objc deinit
}
public struct StepView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(image: SwiftUI.Image, title: Swift.String) where Content == SwiftUI.EmptyView
  public init(image: SwiftUI.Image, title: Swift.String, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI8StepViewV4bodyQrvp", 0) __<Content>
}
extension Swift.String {
  public var htmlAttributedString: Foundation.NSAttributedString {
    get
  }
}
final public class StrongRouter<RouteType> : WaveUI.Router where RouteType : WaveUI.Route {
  public init<T>(_ router: T) where RouteType == T.RouteType, T : WaveUI.Router
  final public func contextTrigger(_ route: RouteType, with options: WaveUI.TransitionOptions, completion: WaveUI.ContextPresentationHandler?)
  final public func trigger(_ route: RouteType, with options: WaveUI.TransitionOptions, completion: WaveUI.PresentationHandler?)
  final public func presented(from presentable: (any WaveUI.Presentable)?)
  final public var viewController: UIKit.UIViewController! {
    get
  }
  final public func registerParent(_ presentable: any WaveUI.Presentable & Swift.AnyObject)
  final public func childTransitionCompleted()
  @objc deinit
}
public struct SubscriptionProductControl : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($unit) public var unit: SharedModels.Unit {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $unit: SwiftUI.Binding<SharedModels.Unit> {
    get
  }
  public let incrementAction: (_ id: Swift.String) -> Swift.Void
  public let decrementAction: (_ id: Swift.String) -> Swift.Void
  public init(unit: SwiftUI.Binding<SharedModels.Unit>, incrementAction: @escaping (_ id: Swift.String) -> Swift.Void, decrementAction: @escaping (_ id: Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI26SubscriptionProductControlV4bodyQrvp", 0) __
}
public protocol LabilGrotesk {
}
extension WaveUI.LabilGrotesk {
  public static func headlineLarge() -> SwiftUI.Font
  public static func headlineMedium() -> SwiftUI.Font
  public static func headlineSmall() -> SwiftUI.Font
  public static func titleLarge() -> SwiftUI.Font
  public static func titleSmall() -> SwiftUI.Font
  public static func subtitleLarge() -> SwiftUI.Font
  public static func subtitleSmallMedium() -> SwiftUI.Font
  public static func subtitleSmallRegular() -> SwiftUI.Font
  public static func buttonText() -> SwiftUI.Font
  public static func bodyLargeMedium() -> SwiftUI.Font
  public static func bodyLargeRegular() -> SwiftUI.Font
  public static func bodySmallMedium() -> SwiftUI.Font
  public static func bodySmallRegular() -> SwiftUI.Font
  public static func bodySmallRegularUIKit() -> UIKit.UIFont
  public static func chipTextMedium() -> SwiftUI.Font
  public static func chipTextRegular() -> SwiftUI.Font
}
extension SwiftUI.Font : WaveUI.LabilGrotesk {
}
extension UIKit.UIFont : WaveUI.LabilGrotesk {
}
@objc @_inheritsConvenienceInitializers open class TabBarAnimationDelegate : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension WaveUI.TabBarAnimationDelegate : UIKit.UITabBarControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, interactionControllerFor animationController: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, animationControllerForTransitionFrom fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, didSelect viewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, willBeginCustomizing viewControllers: [UIKit.UIViewController])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, didEndCustomizing viewControllers: [UIKit.UIViewController], changed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, willEndCustomizing viewControllers: [UIKit.UIViewController], changed: Swift.Bool)
}
open class TabBarCoordinator<RouteType> : WaveUI.BaseCoordinator<RouteType, WaveUI.TabBarTransition> where RouteType : WaveUI.Route {
  public var delegate: (any UIKit.UITabBarControllerDelegate)? {
    get
    set
  }
  override public init(rootViewController: WaveUI.TabBarCoordinator<RouteType>.RootViewController = .init(), initialRoute: RouteType?)
  public init(rootViewController: WaveUI.TabBarCoordinator<RouteType>.RootViewController = .init(), tabs: [any WaveUI.Presentable])
  public init(rootViewController: WaveUI.TabBarCoordinator<RouteType>.RootViewController = .init(), tabs: [any WaveUI.Presentable], select: any WaveUI.Presentable)
  public init(rootViewController: WaveUI.TabBarCoordinator<RouteType>.RootViewController = .init(), tabs: [any WaveUI.Presentable], select: Swift.Int)
  @objc deinit
}
public typealias TabBarTransition = WaveUI.Transition<UIKit.UITabBarController>
extension WaveUI.Transition where RootViewController : UIKit.UITabBarController {
  public static func set(_ presentables: [any WaveUI.Presentable], animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func select(_ presentable: any WaveUI.Presentable, animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func select(index: Swift.Int, animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
}
public struct TaxIdTextField : SwiftUI.View {
  public init(text: SwiftUI.Binding<Swift.String>, hasError: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String, shouldBecomeFirstResponder: Swift.Bool, customErrorMessage: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI14TaxIdTextFieldV4bodyQrvp", 0) __
}
public struct TealColor {
  public let dark: SwiftUI.Color
  public let bright: SwiftUI.Color
  public let medium: SwiftUI.Color
  public let light: SwiftUI.Color
  public init(dark: SwiftUI.Color = .init(red: 18/255, green: 130/255, blue: 110/255), bright: SwiftUI.Color = .init(red: 14/255, green: 186/255, blue: 155/255), medium: SwiftUI.Color = .init(red: 93/255, green: 222/255, blue: 198/255), light: SwiftUI.Color = .init(red: 209/255, green: 245/255, blue: 239/255))
}
extension SwiftUI.Text {
  public init(_ attributedString: Foundation.NSAttributedString)
}
public struct TextButton : SwiftUI.View {
  public init(text: Swift.String, height: CoreFoundation.CGFloat = Dimen.Button.default, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI10TextButtonV4bodyQrvp", 0) __
}
public struct TextColor {
  public let text01: SwiftUI.Color
  public let text02: SwiftUI.Color
  public let text03: SwiftUI.Color
  public let text04: SwiftUI.Color
  public let text05: SwiftUI.Color
  public init(text01: SwiftUI.Color = .init(red: 15/255, green: 15/255, blue: 15/255), text02: SwiftUI.Color = .init(red: 64/255, green: 64/255, blue: 64/255), text03: SwiftUI.Color = .init(red: 102/255, green: 102/255, blue: 102/255), text04: SwiftUI.Color = .init(red: 153/255, green: 153/255, blue: 153/255), text05: SwiftUI.Color = .init(red: 217/255, green: 217/255, blue: 217/255))
}
@_hasMissingDesignatedInitializers public class Theming {
  public static let shared: WaveUI.Theming
  public var color: WaveUI.ColorSet {
    get
  }
  @objc deinit
}
extension SwiftUI.View {
  public func toast(icon: Swift.String, message: Swift.String, state: WaveUI.ToastState, duration: Swift.Double = 3.0, isShowing: SwiftUI.Binding<Swift.Bool>) -> some SwiftUI.View
  
}
public enum ToastState {
  case success
  case failure
  public static func == (a: WaveUI.ToastState, b: WaveUI.ToastState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension WaveUI.Transition {
  public static func show(_ presentable: any WaveUI.Presentable) -> WaveUI.Transition<RootViewController>
  public static func showDetail(_ presentable: any WaveUI.Presentable) -> WaveUI.Transition<RootViewController>
  public static func presentOnRoot(_ presentable: any WaveUI.Presentable, animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func present(_ presentable: any WaveUI.Presentable, animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func embed(_ presentable: any WaveUI.Presentable, in container: any WaveUI.Container) -> WaveUI.Transition<RootViewController>
  public static func dismissToRoot(animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func dismiss(animation: WaveUI.Animation? = nil) -> WaveUI.Transition<RootViewController>
  public static func none() -> WaveUI.Transition<RootViewController>
  public static func multiple<C>(_ transitions: C) -> WaveUI.Transition<RootViewController> where C : Swift.Collection, C.Element == WaveUI.Transition<RootViewController>
  public static func route<C>(_ route: C.RouteType, on coordinator: C) -> WaveUI.Transition<RootViewController> where C : WaveUI.Coordinator
  public static func trigger<R>(_ route: R.RouteType, on router: R) -> WaveUI.Transition<RootViewController> where R : WaveUI.Router
  public static func perform<TransitionType>(_ transition: TransitionType, on viewController: TransitionType.RootViewController) -> WaveUI.Transition<RootViewController> where TransitionType : WaveUI.TransitionProtocol
}
extension WaveUI.Coordinator where Self : AnyObject {
  @available(iOS, introduced: 9.0, deprecated: 13.0, message: "Use `UIContextMenuInteraction` instead.")
  public func registerPeek<RootViewController>(for source: any WaveUI.Container, route: Self.RouteType) -> WaveUI.Transition<RootViewController> where Self.TransitionType == WaveUI.Transition<RootViewController>
}
public struct Transition<RootViewController> : WaveUI.TransitionProtocol where RootViewController : UIKit.UIViewController {
  public typealias PerformClosure = (_ rootViewController: RootViewController, _ options: WaveUI.TransitionOptions, _ completion: WaveUI.PresentationHandler?) -> Swift.Void
  public var presentables: [any WaveUI.Presentable] {
    get
  }
  public var animation: (any WaveUI.TransitionAnimation)? {
    get
  }
  public init(presentables: [any WaveUI.Presentable], animationInUse: (any WaveUI.TransitionAnimation)?, perform: @escaping WaveUI.Transition<RootViewController>.PerformClosure)
  public func perform(on rootViewController: RootViewController, with options: WaveUI.TransitionOptions, completion: WaveUI.PresentationHandler?)
}
public protocol TransitionAnimation : UIKit.UIViewControllerAnimatedTransitioning {
  var interactionController: (any WaveUI.PercentDrivenInteractionController)? { get }
  func start()
  func cleanup()
}
public protocol PercentDrivenInteractionController : UIKit.UIViewControllerInteractiveTransitioning {
  func update(_ percentComplete: CoreFoundation.CGFloat)
  func cancel()
  func finish()
}
extension UIKit.UIPercentDrivenInteractiveTransition : WaveUI.PercentDrivenInteractionController {
}
public struct TransitionOptions {
  public let animated: Swift.Bool
  public init(animated: Swift.Bool)
}
public protocol TransitionPerformer : WaveUI.Presentable {
  associatedtype TransitionType : WaveUI.TransitionProtocol
  var rootViewController: Self.TransitionType.RootViewController { get }
  func performTransition(_ transition: Self.TransitionType, with options: WaveUI.TransitionOptions, completion: WaveUI.PresentationHandler?)
}
public protocol TransitionProtocol : WaveUI.TransitionContext {
  associatedtype RootViewController : UIKit.UIViewController
  func perform(on rootViewController: Self.RootViewController, with options: WaveUI.TransitionOptions, completion: WaveUI.PresentationHandler?)
  static func multiple(_ transitions: [Self]) -> Self
}
extension WaveUI.TransitionProtocol {
  public static func multiple(_ transitions: Self...) -> Self
}
public struct UIKitTextView : SwiftUI.UIViewRepresentable {
  public init(text: SwiftUI.Binding<Swift.String>, placeholder: Swift.String)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SwiftUI.UIViewRepresentableContext<WaveUI.UIKitTextView>) -> UIKit.UITextView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UITextView, context: SwiftUI.UIViewRepresentableContext<WaveUI.UIKitTextView>)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> WaveUI.UIKitTextView.Coordinator
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UITextView
}
extension WaveUI.UIKitTextView {
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Coordinator : ObjectiveC.NSObject, UIKit.UITextViewDelegate {
    @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
    @objc deinit
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static func findCurrentController() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public static func findCurrentController(base: UIKit.UIViewController?) -> UIKit.UIViewController?
}

@available(iOS, deprecated)
public typealias AnyRouter<RouteType> = WaveUI.UnownedRouter<RouteType> where RouteType : WaveUI.Route
public typealias UnownedRouter<RouteType> = WaveUI.UnownedErased<WaveUI.StrongRouter<RouteType>> where RouteType : WaveUI.Route
extension WaveUI.UnownedErased : WaveUI.Presentable where Value : WaveUI.Presentable {
  public var viewController: UIKit.UIViewController! {
    get
  }
  public func childTransitionCompleted()
  public func registerParent(_ presentable: any WaveUI.Presentable & Swift.AnyObject)
  public func presented(from presentable: (any WaveUI.Presentable)?)
  public func setRoot(for window: UIKit.UIWindow)
}
extension WaveUI.UnownedErased : WaveUI.Router where Value : WaveUI.Router {
  public func contextTrigger(_ route: Value.RouteType, with options: WaveUI.TransitionOptions, completion: WaveUI.ContextPresentationHandler?)
  public typealias RouteType = Value.RouteType
}
@propertyWrapper public struct UnownedErased<Value> {
  public var wrappedValue: Value {
    get
  }
}
extension WaveUI.UnownedErased {
  public init<Erasable>(_ value: Erasable, erase: @escaping (Erasable) -> Value) where Erasable : AnyObject
  public mutating func set<Erasable>(_ value: Erasable, erase: @escaping (Erasable) -> Value) where Erasable : AnyObject
}
extension SwiftUI.View {
  public func isHidden(_ hidden: Swift.Bool, remove: Swift.Bool = true) -> some SwiftUI.View
  
}
public typealias ViewTransition = WaveUI.Transition<UIKit.UIViewController>
open class ViewCoordinator<RouteType> : WaveUI.BaseCoordinator<RouteType, WaveUI.ViewTransition> where RouteType : WaveUI.Route {
  override public init(rootViewController: WaveUI.ViewCoordinator<RouteType>.RootViewController, initialRoute: RouteType? = nil)
  @objc deinit
}
extension CoreSession.Wave {
  public func theming(colorSet: WaveUI.ColorSet)
}
public typealias WeakRouter<RouteType> = WaveUI.WeakErased<WaveUI.StrongRouter<RouteType>> where RouteType : WaveUI.Route
extension WaveUI.WeakErased : WaveUI.Presentable where Value : WaveUI.Presentable {
  public var viewController: UIKit.UIViewController! {
    get
  }
  public func childTransitionCompleted()
  public func registerParent(_ presentable: any WaveUI.Presentable & Swift.AnyObject)
  public func presented(from presentable: (any WaveUI.Presentable)?)
  public func setRoot(for window: UIKit.UIWindow)
}
extension WaveUI.WeakErased : WaveUI.Router where Value : WaveUI.Router {
  public func contextTrigger(_ route: Value.RouteType, with options: WaveUI.TransitionOptions, completion: WaveUI.ContextPresentationHandler?)
  public typealias RouteType = Value.RouteType
}
@propertyWrapper public struct WeakErased<Value> {
  public var wrappedValue: Value? {
    get
  }
}
extension WaveUI.WeakErased {
  public init<Erasable>(_ value: Erasable, erase: @escaping (Erasable) -> Value) where Erasable : AnyObject
  public mutating func set<Erasable>(_ value: Erasable, erase: @escaping (Erasable) -> Value) where Erasable : AnyObject
}
public struct ZipCodeTextField : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($hasError) public var hasError: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $hasError: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public init(text: SwiftUI.Binding<Swift.String>, hasError: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String, shouldBecomeFirstResponder: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6WaveUI16ZipCodeTextFieldV4bodyQrvp", 0) __
}

extension WaveUI.AlertButton.Style : Swift.Equatable {}
extension WaveUI.AlertButton.Style : Swift.Hashable {}
extension WaveUI.AsyncViewModel : Swift.Sendable {}
extension WaveUI.BaseScrollView : SwiftUI.View {}
extension WaveUI.BaseView : SwiftUI.View {}
extension WaveUI.BasicCoordinator.InitialLoadingType : Swift.Equatable {}
extension WaveUI.BasicCoordinator.InitialLoadingType : Swift.Hashable {}
extension WaveUI.BottomSheetView.ButtonStyle : Swift.Equatable {}
extension WaveUI.BottomSheetView.ButtonStyle : Swift.Hashable {}
extension WaveUI.CardView : SwiftUI.View {}
extension WaveUI.CarouselView : SwiftUI.View {}
extension WaveUI.DualButtonStepView.ButtonStyle : Swift.Equatable {}
extension WaveUI.DualButtonStepView.ButtonStyle : Swift.Hashable {}
extension WaveUI.SingleButtonStepView.ButtonStyle : Swift.Equatable {}
extension WaveUI.SingleButtonStepView.ButtonStyle : Swift.Hashable {}
extension WaveUI.ToastState : Swift.Equatable {}
extension WaveUI.ToastState : Swift.Hashable {}
