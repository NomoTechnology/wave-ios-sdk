// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CoreFormatters
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Swift.Int {
  public var toGibibytes: Swift.Float {
    get
  }
}
extension Swift.Int {
  public func currencyFormatterWithoutFraction() -> Swift.String
  public func currencyFormatter() -> Swift.String
  public func currencyWithCentsFormatter() -> Swift.String
}
extension Foundation.Date {
  public func formatted(with format: Swift.String) -> Swift.String
  public func toString() -> Swift.String
}
extension Foundation.DateFormatter {
  public static func formatWithString(dateFormat: Swift.String) -> Foundation.DateFormatter
}
extension Swift.Float {
  public func rounded(toPlaces places: Swift.Float) -> Swift.Float
  public var cleanTrailingZeros: Swift.String {
    get
  }
  public func currencyWithCentsFormatter() -> Swift.String
}
extension Swift.String {
  public func formatLineNumber() -> Swift.String
  public func formatLineNumberWithCountryCode() -> Swift.String
}
extension Swift.String {
  public func formatCPFDocument() -> Swift.String
  public func formatMaskedCPFDocument() -> Swift.String
}
public class Mask {
  public var cleanText: Swift.String {
    get
  }
  public var formattingPattern: Swift.String {
    get
    set(newPattern)
  }
  public init(formattingPattern: Swift.String = "")
  @objc deinit
}
extension CoreFormatters.Mask {
  public func formatString(string: Swift.String) -> Swift.String
  public func formatStringWithRange(range: Foundation.NSRange, string: Swift.String) -> Swift.String
}
extension Swift.String {
  public func isRegExPasswordValid() -> Swift.Bool
  public func isRegExEmailValid() -> Swift.Bool
}
extension Swift.String {
  public func isCreditCardHolderNameValid() -> Swift.Bool
  public func isCreditCardExpirationValid() -> Swift.Bool
  public func isCreditCardNumberValid() -> Swift.Bool
}
extension Swift.String {
  public func onlyNumbers() -> Swift.String
  public func validate(text: Swift.String, withRegex regEx: Swift.String) -> Swift.Bool
}
extension Swift.String {
  public func isRegExPhoneNumberValid() -> Swift.Bool
}
extension Swift.String {
  public var isCPFValid: Swift.Bool {
    get
  }
}
public protocol StringFormatter {
}
extension CoreFormatters.StringFormatter {
  public func toString() -> Swift.String
}
extension Swift.Int : CoreFormatters.StringFormatter {
}
extension Swift.Float : CoreFormatters.StringFormatter {
}
